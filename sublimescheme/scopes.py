def scopes():
	print("Scope Name: scope")
	print("=================")
	print("Actionscript: source.actionscript")
	print("Active4D: source.active4d")
	print("Active4D_Html: text.html.strict.active4d")
	print("Active4D_Ini: text.active4d-ini")
	print("Active4D_Library: source.active4d.library")
	print("Ada: source.ada")
	print("Antlr: source.antlr")
	print("Apache: source.apache-config")
	print("Applescript: source.applescript")
	print("Asp: source.asp")
	print("Asp_Vbdotnet: source.asp.vb.net")
	print("Bibtex: text.bibtex")
	print("Blog_Html: text.blog.html")
	print("Blog_Markdown: text.blog.markdown")
	print("Blog_Text: text.blog")
	print("Blog_Textile: text.blog.textile")
	print("Build: source.nant-build")
	print("Bulletin_Board: text.bbcode")
	print("Cpp: source.c++")
	print("C: source.c")
	print("Cake: source.php.cake")
	print("Camlp4: source.camlp4.ocaml")
	print("Cm: source.cm")
	print("Coldfusion: text.html.cfm")
	print("Context_Free: source.context-free")
	print("Cs: source.c-sharp")
	print("Css: source.css")
	print("Css_Experimental: source.css.beta")
	print("Csv: text.tabular.csv")
	print("D: source.d")
	print("Diff: source.diff")
	print("Dokuwiki: text.html.dokuwiki")
	print("Dot: source.dot")
	print("Doxygen: text.html.doxygen")
	print("Dylan: source.dylan")
	print("Eiffel: source.eiffel")
	print("Erlang: source.erlang")
	print("F_Script: source.fscript")
	print("Fortran: source.fortran")
	print("Fxscript: source.fxscript")
	print("Greasemonkey: source.js.greasemonkey")
	print("Gri: source.gri")
	print("Groovy: source.groovy.groovy")
	print("Gtd: text.plain.gtd")
	print("Gtdalt: text.gtdalt")
	print("Haml: text.haml")
	print("Haskell: source.haskell")
	print("Html_Asp: text.html.asp")
	print("Html: text.html.basic")
	print("Html_Django: text.html.django")
	print("Html_For_Aspdotnet: text.html.asp.net")
	print("Html_Mason: text.html.mason")
	print("Html_Rails: text.html.ruby")
	print("Html_Tcl: text.html.tcl")
	print("Icalendar: source.icalendar")
	print("Inform: source.inform")
	print("Ini: source.ini")
	print("Installer_Distribution_Script: text.xml.apple-dist")
	print("Io: source.io")
	print("Java: source.java")
	print("Javaproperties: source.java-props")
	print("Javascript: source.js")
	print("Javascript_Plus_Prototype: source.js.prototype")
	print("Javascript_Plus_Prototype_Bracketed: source.js.prototype.bracketed")
	print("Jquery_Javascript: source.js.jquery")
	print("Json: source.json")
	print("Languagedefinition: source.plist.tm-grammar")
	print("Latex: text.tex.latex")
	print("Latex_Beamer: text.tex.latex.beamer")
	print("Latex_Log: text.log.latex")
	print("Latex_Memoir: text.tex.latex.memoir")
	print("Lexflex: source.lex")
	print("Lighttpd: source.lighttpd-config")
	print("Lilypond: source.lilypond")
	print("Lisp: source.lisp")
	print("Literate_Haskell: text.tex.latex.haskell")
	print("Logo: source.logo")
	print("Logtalk: source.logtalk")
	print("Lua: source.lua")
	print("M: source.matlab")
	print("Macports_Portfile: source.tcl.macports")
	print("Mail: text.mail.markdown")
	print("Makefile: source.makefile")
	print("Man: text.man")
	print("Markdown: text.html.markdown")
	print("Mediawiki: text.html.mediawiki")
	print("Mel: source.mel")
	print("Mips: source.mips")
	print("Mod_Perl: source.apache-config.mod_perl")
	print("Modula_3: source.modula-3")
	print("Moinmoin: text.moinmoin")
	print("Mootools: source.js.mootools")
	print("Movable_Type: text.html.mt")
	print("Multimarkdown: text.html.markdown.multimarkdown")
	print("nemerle: source.nemerle")
	print("Objective_Cpp: source.objc++")
	print("Objective_C: source.objc")
	print("Ocaml: source.ocaml")
	print("Ocamllex: source.ocamllex")
	print("Ocamlyacc: source.ocamlyacc")
	print("Opengl: source.open-gl")
	print("Pascal: source.pascal")
	print("Perl: source.perl")
	print("Php: source.php")
	print("Plain_Text: text.plain")
	print("Pmwiki: text.pmwiki")
	print("Postscript: source.postscript")
	print("Processing: source.processing")
	print("Prolog: source.prolog")
	print("Property_List: []")
	print("Python: source.python")
	print("Python_Django: source.python.django")
	print("Qmake_Project: source.qmake")
	print("Qt_Cpp: source.c++.qt")
	print("Quake3_Config: source.quake-config")
	print("R: source.r")
	print("R_Console: source.r-console")
	print("Ragel: source.c.ragel")
	print("Rd_R_Documentation: text.tex.latex.rd")
	print("Regexp: source.regexp")
	print("Regular_Expressions_Oniguruma: source.regexp.oniguruma")
	print("Regular_Expressions_Python: source.regexp.python")
	print("Release_Notes: text.plain.release-notes")
	print("Remind: source.remind")
	print("Restructuredtext: text.restructuredtext")
	print("Rez: source.rez")
	print("Ruby: source.ruby")
	print("Ruby_Experimental: source.ruby.experimental")
	print("Ruby_On_Rails: source.ruby.rails")
	print("S5: source.s5")
	print("Scheme: source.scheme")
	print("Scilab: source.scilab")
	print("Setext: text.setext")
	print("Shell_Unix_Generic: source.shell")
	print("Slate: source.slate")
	print("Smarty: source.smarty")
	print("Sql: source.sql")
	print("Sql_Rails: source.sql.ruby")
	print("Ssh_Config: source.ssh-config")
	print("Standard_Ml: source.ml")
	print("Strings_File: source.strings")
	print("Subversion_Commit_Message: text.subversion-commit")
	print("Sweave: text.tex.latex.sweave")
	print("Swig: source.swig")
	print("Tcl: source.tcl")
	print("Template_Toolkit: text.html.tt")
	print("Tex: text.tex")
	print("Tex_Math: text.tex.math")
	print("Textile: text.html.textile")
	print("Tsv: text.tabular.tsv")
	print("Twiki: text.html.twiki")
	print("Txt2Tags: text.txt2tags")
	print("Txt2Tags_old: source.t2t")
	print("Vectorscript: source.pascal.vectorscript")
	print("Xhtml_1Dot0: text.html.xhtml.1-strict")
	print("Xml: text.xml")
	print("Xml_Strict: text.xml.strict")
	print("Xsl: text.xml.xsl")
	print("Yaml: source.yaml")
	print("Yaml_old: source.yaml")
	print("Yui_Javascript: source.js.yui")
	return ""



# Scope functions
def actionscript():
	header = "ACTIONSCRIPT"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.actionscript\n")
	print("ActionScript")
	print("comment.block.actionscript")
	print("comment.line.double-slash.actionscript")
	print("constant.character.escape.actionscript")
	print("constant.language.actionscript")
	print("constant.numeric.actionscript")
	print("entity.name.function.asp")
	print("entity.name.type.class.actionscript")
	print("entity.other.inherited-class.actionscript")
	print("keyword.control.actionscript")
	print("keyword.operator.actionscript")
	print("keyword.operator.symbolic.actionscript")
	print("meta.class.actionscript")
	print("meta.function.actionscript")
	print("meta.preprocessor.actionscript")
	print("punctuation.definition.comment.actionscript")
	print("punctuation.definition.parameters.begin.actionscript")
	print("punctuation.definition.parameters.end.actionscript")
	print("punctuation.definition.preprocessor.actionscript")
	print("punctuation.definition.string.begin.actionscript")
	print("punctuation.definition.string.end.actionscript")
	print("storage.modifier.extends.actionscript")
	print("storage.type.actionscript")
	print("storage.type.class.actionscript")
	print("storage.type.function.asp")
	print("string.quoted.double.actionscript")
	print("string.quoted.single.actionscript")
	print("support.class.actionscript")
	print("support.constant.actionscript")
	print("support.function.actionscript")
	print("variable.parameter.function.asp")
	return ""




def active4d():
	header = "ACTIVE4D"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.active4d\n")
	print("Active4D")
	print("comment.block.active4d")
	print("comment.line.backtick.active4d")
	print("comment.line.double-backslash.continuation.active4d")
	print("comment.line.double-slash.active4d")
	print("constant.character.escape.active4d")
	print("constant.language.boolean.active4d")
	print("constant.numeric.active4d")
	print("constant.other.date.active4d")
	print("constant.other.time.active4d")
	print("entity.name.function.active4d")
	print("keyword.control.active4d")
	print("keyword.operator.active4d")
	print("keyword.other.active4d")
	print("meta.function.active4d")
	print("punctuation.definition.comment.active4d")
	print("punctuation.definition.constant.active4d")
	print("punctuation.definition.entity.active4d")
	print("punctuation.definition.parameters.active4d")
	print("punctuation.definition.string.begin.active4d")
	print("punctuation.definition.string.end.active4d")
	print("punctuation.definition.variable.active4d")
	print("punctuation.separator.key-value.active4d")
	print("punctuation.separator.parameters.active4d")
	print("source.interpolated.active4d")
	print("storage.type.function.active4d")
	print("string.interpolated.quoted.single.active4d")
	print("string.interpolated.quoted.triple.heredoc.active4d")
	print("string.quoted.double.active4d")
	print("string.quoted.triple.heredoc.active4d")
	print("support.class.active4d")
	print("support.constant.active4d")
	print("support.function.active4d")
	print("support.variable.active4d")
	print("text.xml")
	print("variable.other.interpolated.collection-ref.active4d")
	print("variable.other.interpolated.local.active4d")
	print("variable.other.interpolated.table-field.active4d")
	print("variable.other.interprocess.active4d")
	print("variable.other.local.active4d")
	print("variable.other.table-field.active4d")
	print("variable.parameter.function.active4d")
	return ""




def active4d_html():
	header = "ACTIVE4D_HTML"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.html.strict.active4d\n")
	print("comment.block.html")
	print("constant.character.entity.html")
	print("constant.other.inline-data.html")
	print("entity.name.tag.block.any.html")
	print("entity.name.tag.doctype.html")
	print("entity.name.tag.html")
	print("entity.name.tag.inline.any.html")
	print("entity.name.tag.other.html")
	print("entity.name.tag.script.html")
	print("entity.name.tag.structure.any.html")
	print("entity.name.tag.style.html")
	print("entity.name.tag.xml.html")
	print("entity.other.attribute-name.html")
	print("entity.other.attribute-name.id.html")
	print("invalid.illegal.bad-ampersand.html")
	print("invalid.illegal.bad-angle-bracket.html")
	print("invalid.illegal.bad-comments-or-CDATA.html")
	print("invalid.illegal.incomplete.html")
	print("meta.attribute-with-value.id.html")
	print("meta.scope.between-tag-pair.html")
	print("meta.tag.any.html")
	print("meta.tag.block.any.html")
	print("meta.tag.inline.any.html")
	print("meta.tag.other.html")
	print("meta.tag.preprocessor.xml.html")
	print("meta.tag.processor.html")
	print("meta.tag.sgml.doctype.html")
	print("meta.tag.sgml.html")
	print("meta.tag.structure.any.html")
	print("punctuation.definition.comment.html")
	print("punctuation.definition.entity.html")
	print("punctuation.definition.string.begin.html")
	print("punctuation.definition.string.begin.js")
	print("punctuation.definition.string.end.html")
	print("punctuation.definition.string.end.js")
	print("punctuation.definition.tag.html")
	print("punctuation.definition.tag.xml.html")
	print("punctuation.section.embedded.active4d")
	print("punctuation.separator.key-value.html")
	print("punctuation.terminator.entity.html")
	print("source.active4d.embedded.html")
	print("source.css.embedded.html")
	print("source.js.embedded.html")
	print("string.quoted.double.doctype.identifiers-and-DTDs.html")
	print("string.quoted.double.html")
	print("string.quoted.double.js")
	print("string.quoted.single.html")
	print("string.quoted.single.js")
	return ""




def active4d_ini():
	header = "ACTIVE4D_INI"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.active4d-ini\n")
	print("comment.block.active4d-ini")
	print("comment.line.backtick.active4d-ini")
	print("comment.line.double-backslash.continuation.active4d-ini")
	print("comment.line.double-slash.active4d-ini")
	print("constant.character.escape.active4d-ini")
	print("constant.language.boolean.active4d-ini")
	print("keyword.operator.active4d-ini")
	print("punctuation.definition.comment.active4d-ini")
	print("punctuation.definition.string.begin.active4d-ini")
	print("punctuation.definition.string.end.active4d-ini")
	print("string.quoted.double.active4d-ini")
	print("support.constant.active4d-ini")
	return ""




def active4d_library():
	header = "ACTIVE4D_LIBRARY"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.active4d.library\n")
	print("keyword.other.active4d")
	return ""




def ada():
	header = "ADA"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.ada\n")
	print("Ada")
	print("comment.line.double-dash.ada")
	print("constant.numeric.ada")
	print("invalid.illegal.lf-in-string.ada")
	print("keyword.control.ada")
	print("punctuation.definition.comment.ada")
	print("punctuation.definition.string.begin.ada")
	print("punctuation.definition.string.end.ada")
	print("string.quoted.double.ada")
	return ""




def antlr():
	header = "ANTLR"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.antlr\n")
	print("ANTLR")
	print("comment.block.antlr")
	print("comment.line.double-slash.antlr")
	print("constant.character.escape.antlr")
	print("constant.language.boolean.antlr")
	print("constant.language.java-or-c")
	print("constant.numeric.antlr")
	print("constant.numeric.java-or-c")
	print("constant.other.token.antlr")
	print("entity.name.function.rule.antlr")
	print("entity.name.type.class.antlr")
	print("entity.name.type.token.antlr")
	print("keyword.control.antlr")
	print("keyword.control.java-or-c")
	print("keyword.operator.sizeof.java-or-c")
	print("keyword.other.options.antlr")
	print("meta.definition.class.antlr")
	print("meta.definition.class.extends.antlr")
	print("meta.options-block.antlr")
	print("meta.options.antlr")
	print("meta.rule.antlr")
	print("punctuation.definition.comment.antlr")
	print("punctuation.definition.string.begin.antlr")
	print("punctuation.definition.string.begin.java-or-c")
	print("punctuation.definition.string.end.antlr")
	print("punctuation.definition.string.end.java-or-c")
	print("punctuation.section.group.antlr")
	print("punctuation.section.options.antlr")
	print("source.embedded.java-or-c.antlr")
	print("storage.modifier.antlr")
	print("storage.modifier.java-or-c")
	print("storage.type.antlr")
	print("storage.type.java-or-c")
	print("string.quoted.double.antlr")
	print("string.quoted.double.java-or-c")
	print("string.quoted.single.antlr")
	print("string.quoted.single.java-or-c")
	print("support.class.antlr")
	print("support.constant.eof-char.antlr")
	print("variable.other.option.antlr")
	return ""




def apache():
	header = "APACHE"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.apache-config\n")
	print("Apache")
	print("comment.line.number-sign.apache-config")
	print("constant.character.escape.apostrophe.apache")
	print("entity.name.tag.apache-config")
	print("invalid.illegal.bad-var.apache-config")
	print("meta.directory.apache-config")
	print("meta.location.apache-config")
	print("meta.scope.between-tag-pair.apache-config")
	print("meta.tag.any.html")
	print("meta.tag.apache-config")
	print("meta.toc-list.directory.apache-config")
	print("meta.toc-list.location.apache-config")
	print("meta.toc-list.virtual-host.apache-config")
	print("meta.vhost.apache-config")
	print("punctuation.definition.comment.apache-config")
	print("punctuation.definition.string.begin.apache-config")
	print("punctuation.definition.string.end.apache-config")
	print("punctuation.definition.tag.apache-config")
	print("punctuation.definition.variable.apache-config")
	print("string.other.rewrite-condition.apache-config")
	print("string.other.rewrite-substitution.apache-config")
	print("string.quoted.double.apache-config")
	print("string.regexp.rewrite-operator.apache-config")
	print("string.regexp.rewrite-pattern.apache-config")
	print("string.regexp.rewrite-test.apache-config")
	print("support.class.apache-config")
	print("support.constant.apache-config")
	print("support.constant.rewritecond.apache-config")
	print("support.constant.rewriterule.apache-config")
	print("support.variable.apache-config")
	return ""




def applescript():
	header = "APPLESCRIPT"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.applescript\n")
	print("AppleScript")
	print("comment.block.applescript")
	print("comment.line.double-dash.applescript")
	print("constant.character.escape.applescript")
	print("constant.language.boolean.applescript")
	print("constant.language.null.applescript")
	print("constant.numeric.applescript")
	print("constant.other.characters.applescript")
	print("constant.other.considering-ignoring-attributes.applescript")
	print("constant.other.date-time.applescript")
	print("constant.other.key.applescript")
	print("constant.other.miscellaneous.applescript")
	print("constant.other.text-styles.applescript")
	print("entity.name.function.handler.applescript")
	print("entity.name.type.script-object.applescript")
	print("keyword.control.applescript")
	print("keyword.control.on.applescript")
	print("keyword.control.preposition.applescript")
	print("keyword.control.reference.applescript")
	print("keyword.control.script.applescript")
	print("keyword.operator.applescript")
	print("meta.data.applescript")
	print("meta.data.array.applescript")
	print("meta.function.prepositional.applescript")
	print("meta.function.with-parentheses.applescript")
	print("meta.identifier.applescript")
	print("meta.script.applescript")
	print("meta.tell-block.application.finder.applescript")
	print("meta.tell-block.application.generic.applescript")
	print("meta.tell-block.application.itunes.applescript")
	print("meta.tell-block.application.system-events.applescript")
	print("meta.tell-block.application.textmate.applescript")
	print("meta.tell-block.generic.applescript")
	print("punctuation.definition.comment.applescript")
	print("punctuation.definition.data.applescript")
	print("punctuation.definition.identifier.applescript")
	print("punctuation.definition.parameters.applescript")
	print("punctuation.definition.string.applescript")
	print("punctuation.section.array.applescript")
	print("punctuation.section.group.applescript")
	print("punctuation.separator.array.applescript")
	print("punctuation.separator.continuation.line.applescript")
	print("punctuation.separator.key-value.applescript")
	print("punctuation.separator.key-value.property.applescript")
	print("storage.type.utxt.applescript")
	print("string.quoted.double.applescript")
	print("string.quoted.double.application-name.applescript")
	print("string.unquoted.data.applescript")
	print("support.class.built-in.applescript")
	print("support.class.finder.items.applescript")
	print("support.class.finder.type-definitions.applescript")
	print("support.class.finder.window-classes.applescript")
	print("support.class.itunes.applescript")
	print("support.class.standard-suite.applescript")
	print("support.class.standardadditions.file.applescript")
	print("support.class.standardadditions.internet.applescript")
	print("support.class.standardadditions.miscellaneous.applescript")
	print("support.class.standardadditions.user-interaction.applescript")
	print("support.class.system-events.audio-file.applescript")
	print("support.class.system-events.disk-folder-file.applescript")
	print("support.class.system-events.folder-actions.applescript")
	print("support.class.system-events.movie-file.applescript")
	print("support.class.system-events.processes.applescript")
	print("support.class.system-events.property-list.applescript")
	print("support.class.system-events.quicktime-file.applescript")
	print("support.class.system-events.xml.applescript")
	print("support.class.sytem-events.other.applescript")
	print("support.class.text-suite.applescript")
	print("support.class.textmate.applescript")
	print("support.constant.finder.applescript")
	print("support.constant.itunes.applescript")
	print("support.constant.standard-suite.applescript")
	print("support.function.built-in.applescript")
	print("support.function.finder.items.applescript")
	print("support.function.itunes.applescript")
	print("support.function.standard-suite.applescript")
	print("support.function.standardadditions.clipboard.applescript")
	print("support.function.standardadditions.file-i-o.applescript")
	print("support.function.standardadditions.file.applescript")
	print("support.function.standardadditions.folder-actions.applescript")
	print("support.function.standardadditions.internet.applescript")
	print("support.function.standardadditions.miscellaneous.applescript")
	print("support.function.standardadditions.scripting.applescript")
	print("support.function.standardadditions.string.applescript")
	print("support.function.standardadditions.user-interaction.applescript")
	print("support.function.system-events.disk-folder-file.applescript")
	print("support.function.system-events.folder-actions.applescript")
	print("support.function.system-events.power.applescript")
	print("support.function.system-events.processes.applescript")
	print("support.function.system-events.system-events.applescript")
	print("support.function.textmate.applescript")
	print("support.variable.finder.applescript")
	print("support.variable.itunes.applescript")
	print("support.variable.standard-suite.applescript")
	print("variable.language.applescript")
	print("variable.parameter.handler.applescript")
	return ""




def asp():
	header = "ASP"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.asp\n")
	print("ASP")
	print("comment.line.apostrophe.asp")
	print("constant.character.escape.apostrophe.asp")
	print("constant.language.asp")
	print("constant.numeric.asp")
	print("entity.name.function.asp")
	print("keyword.control.asp")
	print("keyword.operator.asp")
	print("meta.function.asp")
	print("punctuation.definition.comment.asp")
	print("punctuation.definition.parameters.asp")
	print("punctuation.definition.string.begin.asp")
	print("punctuation.definition.string.end.asp")
	print("punctuation.definition.variable.asp")
	print("storage.modifier.asp")
	print("storage.type.asp")
	print("storage.type.function.asp")
	print("string.quoted.double.asp")
	print("support.class.asp")
	print("support.class.collection.asp")
	print("support.constant.asp")
	print("support.function.asp")
	print("support.function.event.asp")
	print("support.function.vb.asp")
	print("support.type.vb.asp")
	print("variable.other.asp")
	print("variable.parameter.function.asp")
	return ""




def asp_vbdotnet():
	header = "ASP_VB.NET"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.asp.vb.net\n")
	print("comment.line.apostrophe.asp")
	print("constant.character.escape.apostrophe.asp")
	print("constant.language.asp")
	print("constant.numeric.asp")
	print("entity.name.function.asp")
	print("keyword.control.asp")
	print("keyword.operator.asp")
	print("keyword.operator.js")
	print("meta.ending-space")
	print("meta.even-tab.spaces")
	print("meta.even-tab.tabs")
	print("meta.function.asp")
	print("meta.leading-space")
	print("meta.odd-tab.spaces")
	print("meta.odd-tab.tabs")
	print("meta.round-brackets")
	print("meta.separator.comma.asp")
	print("punctuation.definition.comment.asp")
	print("punctuation.definition.parameters.asp")
	print("punctuation.definition.string.begin.asp")
	print("punctuation.definition.string.end.asp")
	print("punctuation.definition.variable.asp")
	print("punctuation.section.round-brackets.begin.asp")
	print("punctuation.section.round-brackets.end.asp")
	print("storage.modifier.asp")
	print("storage.type.asp")
	print("storage.type.function.asp")
	print("string.quoted.double.asp")
	print("support.class.asp")
	print("support.class.collection.asp")
	print("support.constant.asp")
	print("support.function.asp")
	print("support.function.event.asp")
	print("support.function.vb.asp")
	print("support.type.vb.asp")
	print("variable.other.asp")
	print("variable.other.bfeac.asp")
	print("variable.other.dim.asp")
	print("variable.parameter.function.asp")
	return ""




def bibtex():
	header = "BIBTEX"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.bibtex\n")
	print("BibTeX")
	print("comment.block.bibtex")
	print("comment.line.at-sign.bibtex")
	print("constant.numeric.bibtex")
	print("entity.name.type.entry-key.bibtex")
	print("invalid.illegal.at-sign.bibtex")
	print("keyword.other.entry-type.bibtex")
	print("keyword.other.string-constant.bibtex")
	print("meta.entry.braces.bibtex")
	print("meta.entry.parenthesis.bibtex")
	print("meta.key-assignment.bibtex")
	print("meta.string-constant.braces.bibtex")
	print("meta.string-constant.parenthesis.bibtex")
	print("punctuation.definition.comment.bibtex")
	print("punctuation.definition.group.begin.bibtex")
	print("punctuation.definition.group.end.bibtex")
	print("punctuation.definition.keyword.bibtex")
	print("punctuation.definition.string.begin.bibtex")
	print("punctuation.definition.string.end.bibtex")
	print("punctuation.section.entry.begin.bibtex")
	print("punctuation.section.entry.end.bibtex")
	print("punctuation.section.string-constant.begin.bibtex")
	print("punctuation.section.string-constant.end.bibtex")
	print("punctuation.separator.key-value.bibtex")
	print("string.quoted.double.bibtex")
	print("string.quoted.other.braces.bibtex")
	print("string.unquoted.key.bibtex")
	print("variable.other.bibtex")
	return ""




def blog_html():
	header = "BLOG_HTML"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.blog.html\n")
	print("invalid.illegal.meta.header.blog")
	print("keyword.other.blog")
	print("meta.header.blog")
	print("meta.separator.blog")
	print("punctuation.separator.key-value.blog")
	print("string.unquoted.blog")
	print("text.html")
	return ""




def blog_markdown():
	header = "BLOG_MARKDOWN"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.blog.markdown\n")
	print("invalid.illegal.meta.header.blog")
	print("keyword.other.blog")
	print("meta.header.blog")
	print("meta.separator.blog")
	print("punctuation.separator.key-value.blog")
	print("string.unquoted.blog")
	print("text.html.markdown")
	return ""




def blog_text():
	header = "BLOG_TEXT"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.blog\n")
	print("invalid.illegal.meta.header.blog")
	print("keyword.other.blog")
	print("meta.header.blog")
	print("meta.separator.blog")
	print("punctuation.separator.key-value.blog")
	print("string.unquoted.blog")
	print("text.plain")
	return ""




def blog_textile():
	header = "BLOG_TEXTILE"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.blog.textile\n")
	print("invalid.illegal.meta.header.blog")
	print("keyword.other.blog")
	print("meta.header.blog")
	print("meta.separator.blog")
	print("punctuation.separator.key-value.blog")
	print("string.unquoted.blog")
	print("text.html.textile")
	return ""




def build():
	header = "BUILD"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.nant-build\n")
	print("comment.block.nant")
	print("constant.character.entity.nant")
	print("entity.name.tag.nant")
	print("entity.other.attribute-name.nant")
	print("invalid.illegal.bad-ampersand.nant")
	print("meta.tag.nant")
	print("punctuation.definition.comment.nant")
	print("punctuation.definition.constant.nant")
	print("punctuation.definition.string.begin.nant")
	print("punctuation.definition.string.end.nant")
	print("punctuation.definition.tag.nant")
	print("string.quoted.double.nant")
	print("string.quoted.single.nant")
	return ""




def bulletin_board():
	header = "BULLETIN_BOARD"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.bbcode\n")
	print("constant.numeric.size.bbcode")
	print("constant.other.alignment.bbcode")
	print("constant.other.list-type.bbcode")
	print("constant.other.named-color.bbcode")
	print("constant.other.rgb-value.bbcode")
	print("constant.other.smiley.bbcode")
	print("invalid.illegal.expected-a-color.bbcode")
	print("invalid.illegal.expected-a-size.bbcode")
	print("invalid.illegal.expected-an-alignment.bbcode")
	print("markup.underline.link.bbcode")
	print("meta.link.image.bbcode")
	print("meta.link.inline.bbcode")
	print("meta.tag.bbcode")
	print("punctuation.definition.constant.bbcode")
	print("punctuation.definition.tag.bbcode")
	return ""




def cpp():
	header = "C++"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.c++\n")
	print("C++")
	print("entity.name.function.c")
	print("keyword.control.c++")
	print("keyword.operator.c++")
	print("keyword.operator.cast.c++")
	print("meta.function.constructor.c++")
	print("meta.function.destructor.c++")
	print("meta.function.destructor.prototype.c++")
	print("punctuation.definition.parameters.c")
	print("storage.modifier.c++")
	print("storage.type.c++")
	print("storage.type.template.c++")
	print("variable.language.c++")
	print("variable.other.readwrite.member.c++")
	return ""




def c():
	header = "C"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.c\n")
	print("C")
	print("comment.block.c")
	print("comment.block.preprocessor.if-branch")
	print("comment.line.double-slash.c++")
	print("constant.character.escape.c")
	print("constant.language.c")
	print("constant.numeric.c")
	print("constant.numeric.preprocessor.c")
	print("constant.other.placeholder.c")
	print("constant.other.variable.mac-classic.c")
	print("entity.name.function.c")
	print("entity.name.function.preprocessor.c")
	print("invalid.illegal.placeholder.c")
	print("invalid.illegal.unknown-escape.c")
	print("keyword.control.c")
	print("keyword.control.import.c")
	print("keyword.control.import.define.c")
	print("keyword.control.import.else.c")
	print("keyword.control.import.error.c")
	print("keyword.control.import.if.c")
	print("keyword.control.import.include.c")
	print("keyword.control.import.pragma.c")
	print("keyword.operator.sizeof.c")
	print("meta.function.c")
	print("meta.function.prototype.c")
	print("meta.preprocessor.c")
	print("meta.preprocessor.c.include")
	print("meta.preprocessor.diagnostic.c")
	print("meta.preprocessor.macro.c")
	print("meta.section")
	print("meta.toc-list.pragma-mark.c")
	print("punctuation.definition.comment.c")
	print("punctuation.definition.parameters.c")
	print("punctuation.definition.string.begin.c")
	print("punctuation.definition.string.end.c")
	print("punctuation.separator.continuation.c")
	print("punctuation.separator.continuation.c++")
	print("punctuation.separator.parameters.c")
	print("storage.modifier.c")
	print("storage.type.c")
	print("string.quoted.double.c")
	print("string.quoted.double.include.c")
	print("string.quoted.other.lt-gt.include.c")
	print("string.quoted.single.c")
	print("support.constant.mac-classic.c")
	print("support.function.C99.c")
	print("support.type.mac-classic.c")
	print("support.type.pthread.c")
	print("support.type.stdint.c")
	print("support.type.sys-types.c")
	print("variable.other.readwrite.global.mac-classic.c")
	print("variable.other.readwrite.static.mac-classic.c")
	print("variable.parameter.preprocessor.c")
	return ""




def cake():
	header = "CAKE"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.php.cake\n")
	print("Cake")
	print("invalid.deprecated.helper.ajax.cake")
	print("invalid.deprecated.helper.html.cake")
	print("invalid.deprecated.model.cake")
	print("support.constant.core.cake")
	print("support.function.basics.cake")
	print("support.function.component.requestHandler.cake")
	print("support.function.component.sanitize.cake")
	print("support.function.component.security.cake")
	print("support.function.component.session.cake")
	print("support.function.controller.cake")
	print("support.function.file.cake")
	print("support.function.helper.ajax.cake")
	print("support.function.helper.cake")
	print("support.function.helper.html.cake")
	print("support.function.helper.javascript.cake")
	print("support.function.helper.number.cake")
	print("support.function.helper.text.cake")
	print("support.function.helper.time.cake")
	print("support.function.log.cake")
	print("support.function.model.cake")
	print("support.function.neatArray.cake")
	print("support.function.neatString.cake")
	return ""




def camlp4():
	header = "CAMLP4"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.camlp4.ocaml\n")
	print("camlp4")
	print("keyword.other.camlp4.ocaml")
	print("meta.camlp4-stream.element.ocaml")
	print("meta.camlp4-stream.ocaml")
	print("punctuation.definition.camlp4-stream.ocaml")
	print("punctuation.definition.camlp4.simple-element.ocaml")
	print("punctuation.separator.camlp4.ocaml")
	return ""




def cm():
	header = "CM"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.cm\n")
	print("CM")
	print("comment.block.cm")
	print("constant.character.escape.cm")
	print("keyword.control.import.if.cm")
	print("keyword.other.cm")
	print("meta.directive.cm")
	print("meta.preprocessor.cm")
	print("punctuation.definition.comment.cm")
	print("string.quoted.double.cm")
	return ""




def coldfusion():
	header = "COLDFUSION"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.html.cfm\n")
	print("ColdFusion")
	print("comment.block.cfml")
	print("constant.character.entity.html")
	print("entity.name.tag.cfml")
	print("entity.name.tag.cfoutput.cfml")
	print("entity.name.tag.cfquery.cfml")
	print("entity.other.attribute-name.cfml")
	print("entity.other.attribute-name.id.html")
	print("invalid.illegal.bad-ampersand.html")
	print("meta.attribute-with-value.id.cfml")
	print("meta.scope.output.cfml")
	print("meta.tag.any.cfml")
	print("meta.tag.cfoutput.cfml")
	print("meta.tag.cfquery.cfml")
	print("source.sql.embedded")
	print("string.quoted.double.cfml")
	print("string.quoted.single.cfml")
	return ""




def context_free():
	header = "CONTEXT_FREE"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.context-free\n")
	print("comment.block.cfdg")
	print("comment.line.cfdg")
	print("constant.language.color-adjustment.cfdg")
	print("constant.language.geometry-adjustment.cfdg")
	print("constant.numeric.cfdg")
	print("entity.name.function.rule.cfdg")
	print("entity.name.function.rule.definition.cfdg")
	print("keyword.control.background.cfdg")
	print("keyword.control.include.cfdg")
	print("keyword.control.rule.cfdg")
	print("keyword.control.startshape.cfdg")
	print("keyword.operator.loop.cfdg")
	print("keyword.operator.sign.cfdg")
	print("punctuation.definition.comment.begin.cfdg")
	print("punctuation.definition.comment.cfdg")
	print("punctuation.definition.comment.end.cfdg")
	print("punctuation.section.ordered-block.begin.cfdg")
	print("punctuation.section.ordered-block.end.cfdg")
	print("punctuation.section.rule.begin.cfdg")
	print("punctuation.section.rule.end.cfdg")
	print("punctuation.section.unordered-block.begin.cfdg")
	print("punctuation.section.unordered-block.end.cfdg")
	print("punctuation.separator.integer-float.cfdg")
	print("string.unquoted.file-name.cfdg")
	return ""




def cs():
	header = "CS"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.c-sharp\n")
	print("C#")
	print("comment.block.c#")
	print("comment.line.double-slash.c#")
	print("constant.character.escape.c#")
	print("constant.numeric.c#")
	print("keyword.control.c#")
	print("keyword.control.import.c#")
	print("meta.preprocessor.c#")
	print("punctuation.definition.comment.c#")
	print("punctuation.definition.string.begin.c#")
	print("punctuation.definition.string.end.c#")
	print("storage.type.c#")
	print("string.quoted.double.c#")
	print("string.quoted.single.c#")
	return ""




def css():
	header = "CSS"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.css\n")
	print("CSS")
	print("comment.block.css")
	print("constant.character.escape.css")
	print("constant.numeric.css")
	print("constant.other.color.rgb-percentage.css")
	print("constant.other.color.rgb-value.css")
	print("entity.name.tag.css")
	print("entity.name.tag.wildcard.css")
	print("entity.other.attribute-name.attribute.css")
	print("entity.other.attribute-name.class.css")
	print("entity.other.attribute-name.id.css")
	print("entity.other.attribute-name.pseudo-class.css")
	print("entity.other.attribute-name.pseudo-element.css")
	print("invalid.deprecated.color.w3c-non-standard-color-name.css")
	print("keyword.control.at-rule.import.css")
	print("keyword.control.at-rule.media.css")
	print("keyword.other.important.css")
	print("keyword.other.unit.css")
	print("meta.at-rule.import.css")
	print("meta.at-rule.media.css")
	print("meta.attribute-selector.css")
	print("meta.property-list.css")
	print("meta.property-name.css")
	print("meta.property-value.css")
	print("meta.selector.css")
	print("punctuation.definition.comment.css")
	print("punctuation.definition.constant.css")
	print("punctuation.definition.entity.css")
	print("punctuation.definition.keyword.css")
	print("punctuation.definition.string.begin.css")
	print("punctuation.definition.string.end.css")
	print("punctuation.section.function.css")
	print("punctuation.section.property-list.css")
	print("punctuation.separator.key-value.css")
	print("punctuation.separator.operator.css")
	print("punctuation.terminator.rule.css")
	print("string.quoted.double.attribute-value.css")
	print("string.quoted.double.css")
	print("string.quoted.single.css")
	print("string.unquoted.attribute-value.css")
	print("support.constant.color.w3c-standard-color-name.css")
	print("support.constant.font-name.css")
	print("support.constant.media.css")
	print("support.constant.property-value.css")
	print("support.function.misc.css")
	print("support.function.url.css")
	print("support.type.property-name.css")
	print("variable.parameter.misc.css")
	print("variable.parameter.url.css")
	return ""




def css_experimental():
	header = "CSS_EXPERIMENTAL"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.css.beta\n")
	print("comment.block.css")
	print("constant.character.escape.css")
	print("constant.numeric.css")
	print("constant.numeric.degree.css")
	print("constant.other.color.rgb-value.css")
	print("constant.other.unit.css")
	print("entity.name.tag.css")
	print("entity.other.attribute-name.class.css")
	print("entity.other.attribute-name.css")
	print("entity.other.attribute-name.id.css")
	print("entity.other.attribute-name.tag.pseudo-class.css")
	print("entity.other.attribute-name.universal.css")
	print("invalid.illegal.bad-comma.css")
	print("keyword.control.at-rule.import.css")
	print("keyword.control.at-rule.media.css")
	print("keyword.operator.css")
	print("meta.attribute-match.css")
	print("meta.constructor.css")
	print("meta.preprocessor.at-rule.import.css")
	print("meta.preprocessor.at-rule.media.css")
	print("meta.property-group.background.css")
	print("meta.property-group.border.css")
	print("meta.property-group.counter.css")
	print("meta.property-group.cue.css")
	print("meta.property-group.font.css")
	print("meta.property-group.list-style.css")
	print("meta.property-group.outline.css")
	print("meta.property-group.text.css")
	print("meta.property-name.css")
	print("meta.property-value.css")
	print("meta.property.azimuth.css")
	print("meta.property.background-attachment.css")
	print("meta.property.background-color.css")
	print("meta.property.background-image.css")
	print("meta.property.background-position.css")
	print("meta.property.background-repeat.css")
	print("meta.property.background.css")
	print("meta.property.border-collapse.css")
	print("meta.property.border-color.css")
	print("meta.property.border-spacing.css")
	print("meta.property.border-style.css")
	print("meta.property.border-width.css")
	print("meta.property.border.css")
	print("meta.property.caption-side.css")
	print("meta.property.clear.css")
	print("meta.property.clip.css")
	print("meta.property.color.css")
	print("meta.property.content.css")
	print("meta.property.counter-increment.css")
	print("meta.property.counter-reset.css")
	print("meta.property.cue-after.css")
	print("meta.property.cue-before.css")
	print("meta.property.cue.css")
	print("meta.property.cursor.css")
	print("meta.property.direction.css")
	print("meta.property.display.css")
	print("meta.property.elem-size.css")
	print("meta.property.elevation.css")
	print("meta.property.empty-cells.css")
	print("meta.property.float.css")
	print("meta.property.font-family.css")
	print("meta.property.font-size.css")
	print("meta.property.font-stretch.css")
	print("meta.property.font-style.css")
	print("meta.property.font-variant.css")
	print("meta.property.font-weight.css")
	print("meta.property.font.css")
	print("meta.property.letter-spacing.css")
	print("meta.property.line-height.css")
	print("meta.property.list-style-image.css")
	print("meta.property.list-style-position.css")
	print("meta.property.list-style-type.css")
	print("meta.property.list-style.css")
	print("meta.property.margin.css")
	print("meta.property.marker-offset.css")
	print("meta.property.marks.css")
	print("meta.property.opacity.css")
	print("meta.property.orphans.css")
	print("meta.property.outline-color.css")
	print("meta.property.outline-style.css")
	print("meta.property.outline-width.css")
	print("meta.property.outline.css")
	print("meta.property.overflow.css")
	print("meta.property.padding.css")
	print("meta.property.page.css")
	print("meta.property.pause.css")
	print("meta.property.pitch.css")
	print("meta.property.placement.css")
	print("meta.property.play-during.css")
	print("meta.property.position.css")
	print("meta.property.quotes.css")
	print("meta.property.richness.css")
	print("meta.property.size.css")
	print("meta.property.speak.css")
	print("meta.property.speech-rate.css")
	print("meta.property.stress.css")
	print("meta.property.table-layout.css")
	print("meta.property.text-align.css")
	print("meta.property.text-decoration.css")
	print("meta.property.text-indent.css")
	print("meta.property.text-shadow.css")
	print("meta.property.text-transform.css")
	print("meta.property.text.css")
	print("meta.property.unicode-bidi.css")
	print("meta.property.vertical-align.css")
	print("meta.property.visibility.css")
	print("meta.property.voice-family.css")
	print("meta.property.volume.css")
	print("meta.property.white-space.css")
	print("meta.property.widows.css")
	print("meta.property.word-spacing.css")
	print("meta.property.z-index.css")
	print("meta.scope.property-list.css")
	print("meta.selector.css")
	print("punctuation.definition.attribute-name.css")
	print("punctuation.definition.comment.css")
	print("punctuation.definition.constant.css")
	print("punctuation.definition.constructor.css")
	print("punctuation.definition.entity.css")
	print("punctuation.definition.keyword.css")
	print("punctuation.definition.string.begin.css")
	print("punctuation.definition.string.end.css")
	print("punctuation.section.property-list.css")
	print("punctuation.separator.key-value.css")
	print("storage.type.constructor.css")
	print("string.other.attribute-value.css")
	print("string.quoted.double.css")
	print("string.quoted.single.css")
	print("support.constant.font-family.css")
	print("support.constant.font-name.css")
	print("support.constant.media.css")
	print("support.constant.named-color.css")
	print("support.constant.property-value.css")
	print("support.type.property-name.css")
	print("variable.parameter.css")
	return ""




def csv():
	header = "CSV"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.tabular.csv\n")
	print("CSV")
	print("constant.character.escape.straight-quote.csv")
	print("meta.tabular.row.csv")
	print("meta.tabular.row.header.csv")
	print("meta.tabular.table.csv")
	print("punctuation.definition.field.csv")
	print("punctuation.separator.table.row.csv")
	print("punctuation.separator.tabular.field.csv")
	return ""




def d():
	header = "D"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.d\n")
	print("D")
	print("comment.block.d")
	print("comment.block.nested.d")
	print("comment.line.double-slash.d")
	print("constant.character.escape.c")
	print("constant.language.boolean.d")
	print("constant.language.d")
	print("constant.numeric.c")
	print("constant.other.placeholder.c")
	print("invalid.illegal.placeholder.c")
	print("invalid.illegal.unknown-escape.c")
	print("keyword.control.branch.d")
	print("keyword.control.conditional.d")
	print("keyword.control.exception.d")
	print("keyword.control.pragma.d")
	print("keyword.control.repeat.d")
	print("keyword.control.statement.d")
	print("keyword.operator.d")
	print("keyword.operator.overload.d")
	print("keyword.other.debug.d")
	print("keyword.other.external.d")
	print("punctuation.definition.comment.d")
	print("punctuation.definition.string.begin.d")
	print("punctuation.definition.string.end.d")
	print("punctuation.section.embedded.mips")
	print("punctuation.separator.continuation.d")
	print("storage.modifier.d")
	print("storage.type.d")
	print("storage.type.structure.d")
	print("storage.type.typedef.d")
	print("string.quoted.double.c")
	print("string.quoted.single.c")
	print("support.type.pthread.c")
	print("support.type.stdint.c")
	print("support.type.sys-types.c")
	return ""




def diff():
	header = "DIFF"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.diff\n")
	print("Diff")
	print("markup.changed.diff")
	print("markup.deleted.diff")
	print("markup.inserted.diff")
	print("meta.diff.header.from-file")
	print("meta.diff.header.to-file")
	print("meta.diff.index")
	print("meta.diff.range.context")
	print("meta.diff.range.normal")
	print("meta.diff.range.unified")
	print("meta.separator.diff")
	print("meta.toc-list.file-name.diff")
	print("meta.toc-list.line-number.diff")
	print("punctuation.definition.from-file.diff")
	print("punctuation.definition.inserted.diff")
	print("punctuation.definition.range.diff")
	print("punctuation.definition.separator.diff")
	print("punctuation.definition.to-file.diff")
	print("punctuation.separator.key-value.diff")
	return ""




def dokuwiki():
	header = "DOKUWIKI"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.html.dokuwiki\n")
	print("DokuWiki")
	print("comment.block.documentation.dokuwiki")
	print("constant.character.escape.dokuwiki")
	print("keyword.other.nocache.dokuwiki")
	print("keyword.other.notoc.dokuwiki")
	print("markup.bold.dokuwiki")
	print("markup.heading.dokuwiki")
	print("markup.italic.dokuwiki")
	print("markup.list.numbered.dokuwiki")
	print("markup.list.unnumbered.dokuwiki")
	print("markup.other.dokuwiki")
	print("markup.other.paragraph.dokuwiki")
	print("markup.other.table.dokuwiki")
	print("markup.raw.dokuwiki")
	print("markup.underline.dokuwiki")
	print("markup.underline.link.dokuwiki")
	print("markup.underline.link.interwiki.dokuwiki")
	print("meta.image.inline.dokuwiki")
	print("meta.link.dokuwiki")
	print("meta.link.email.dokuwiki")
	print("meta.separator.dokuwiki")
	print("punctuation.definition.bold.dokuwiki")
	print("punctuation.definition.comment.dokuwiki")
	print("punctuation.definition.heading.dokuwiki")
	print("punctuation.definition.image.dokuwiki")
	print("punctuation.definition.italic.dokuwiki")
	print("punctuation.definition.link.dokuwiki")
	print("punctuation.definition.list_item.dokuwiki")
	print("punctuation.definition.raw.dokuwiki")
	print("punctuation.definition.string.begin.dokuwiki")
	print("punctuation.definition.string.end.dokuwiki")
	print("punctuation.definition.table.dokuwiki")
	print("punctuation.definition.tag.dokuwiki")
	print("punctuation.definition.underline.dokuwiki")
	print("source.php.embedded.dokuwiki")
	print("string.quoted.double.dokuwiki")
	return ""




def dot():
	header = "DOT"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.dot\n")
	print("comment.block.dot")
	print("comment.line.double-slash.dot")
	print("comment.line.number-sign.dot")
	print("constant.character.escape.dot")
	print("punctuation.definition.comment.dot")
	print("punctuation.definition.string.begin.dot")
	print("punctuation.definition.string.end.dot")
	print("storage.type.dot")
	print("string.quoted.double.dot")
	print("support.constant.attribute.edge.dot")
	print("support.constant.attribute.graph.dot")
	print("support.constant.attribute.node.dot")
	return ""




def doxygen():
	header = "DOXYGEN"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.html.doxygen\n")
	print("Doxygen")
	print("comment.block.doxygen")
	print("comment.line.doxygen")
	print("keyword.control.doxygen")
	print("punctuation.definition.comment.doxygen")
	print("punctuation.definition.keyword.doxygen")
	return ""




def dylan():
	header = "DYLAN"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.dylan\n")
	print("Dylan")
	print("comment.block.dylan")
	print("comment.line.double-slash.dylan")
	print("constant.character.escape.dylan")
	print("constant.numeric.dylan")
	print("entity.name.function.dylan")
	print("keyword.control.def.dylan")
	print("keyword.control.dylan")
	print("keyword.control.sealing-directives.dylan")
	print("meta.function.dylan")
	print("punctuation.definition.comment.dylan")
	print("punctuation.definition.string.begin.dylan")
	print("punctuation.definition.string.end.dylan")
	print("punctuation.separator.continuation.dylan")
	print("storage.modifier.dylan")
	print("storage.type.function.dylan")
	print("string.quoted.double.dylan")
	print("support.class.dylan")
	print("support.constant.language.dylan")
	print("support.function.dylan")
	return ""




def eiffel():
	header = "EIFFEL"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.eiffel\n")
	print("Eiffel")
	print("comment.line.double-dash.eiffel")
	print("constant.character.escape.eiffel")
	print("constant.language.eiffel")
	print("constant.numeric.eiffel")
	print("keyword.control.eiffel")
	print("meta.definition.class.eiffel")
	print("meta.definition.class.extends.java")
	print("meta.definition.class.implements.java")
	print("meta.effective_routine_body.eiffel")
	print("meta.features.eiffel")
	print("meta.rescue.eiffel")
	print("punctuation.definition.comment.eiffel")
	print("punctuation.definition.string.begin.eiffel")
	print("punctuation.definition.string.end.eiffel")
	print("storage.modifier.eiffel")
	print("storage.modifier.java")
	print("string.quoted.double.eiffel")
	print("variable.other.eiffel")
	return ""




def erlang():
	header = "ERLANG"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.erlang\n")
	print("Erlang")
	print("comment.line.erlang")
	print("constant.character.erlang")
	print("constant.character.escape.erlang")
	print("constant.numeric.float.erlang")
	print("constant.numeric.integer.base-11.erlang")
	print("constant.numeric.integer.base-12.erlang")
	print("constant.numeric.integer.base-13.erlang")
	print("constant.numeric.integer.base-14.erlang")
	print("constant.numeric.integer.base-15.erlang")
	print("constant.numeric.integer.base-17.erlang")
	print("constant.numeric.integer.base-18.erlang")
	print("constant.numeric.integer.base-19.erlang")
	print("constant.numeric.integer.base-20.erlang")
	print("constant.numeric.integer.base-21.erlang")
	print("constant.numeric.integer.base-22.erlang")
	print("constant.numeric.integer.base-23.erlang")
	print("constant.numeric.integer.base-24.erlang")
	print("constant.numeric.integer.base-25.erlang")
	print("constant.numeric.integer.base-26.erlang")
	print("constant.numeric.integer.base-27.erlang")
	print("constant.numeric.integer.base-28.erlang")
	print("constant.numeric.integer.base-29.erlang")
	print("constant.numeric.integer.base-3.erlang")
	print("constant.numeric.integer.base-30.erlang")
	print("constant.numeric.integer.base-31.erlang")
	print("constant.numeric.integer.base-32.erlang")
	print("constant.numeric.integer.base-33.erlang")
	print("constant.numeric.integer.base-34.erlang")
	print("constant.numeric.integer.base-35.erlang")
	print("constant.numeric.integer.base-36.erlang")
	print("constant.numeric.integer.base-4.erlang")
	print("constant.numeric.integer.base-5.erlang")
	print("constant.numeric.integer.base-6.erlang")
	print("constant.numeric.integer.base-7.erlang")
	print("constant.numeric.integer.base-9.erlang")
	print("constant.numeric.integer.binary.erlang")
	print("constant.numeric.integer.decimal.erlang")
	print("constant.numeric.integer.hexadecimal.erlang")
	print("constant.numeric.integer.octal.erlang")
	print("constant.other.placeholder.erlang")
	print("constant.other.symbol.escape.erlang")
	print("constant.other.symbol.quoted.single.erlang")
	print("constant.other.symbol.unquoted.erlang")
	print("entity.name.function.definition.erlang")
	print("entity.name.function.erlang")
	print("entity.name.function.guard.erlang")
	print("entity.name.function.macro.definition.erlang")
	print("entity.name.function.macro.erlang")
	print("entity.name.type.class.module.definition.erlang")
	print("entity.name.type.class.module.erlang")
	print("entity.name.type.class.record.definition.erlang")
	print("entity.name.type.class.record.erlang")
	print("invalid.illegal.atom.erlang")
	print("invalid.illegal.character.erlang")
	print("invalid.illegal.integer.erlang")
	print("invalid.illegal.string.erlang")
	print("keyword.control.begin.erlang")
	print("keyword.control.case.erlang")
	print("keyword.control.directive.define.erlang")
	print("keyword.control.directive.erlang")
	print("keyword.control.directive.export.erlang")
	print("keyword.control.directive.ifdef.erlang")
	print("keyword.control.directive.ifndef.erlang")
	print("keyword.control.directive.import.erlang")
	print("keyword.control.directive.module.erlang")
	print("keyword.control.directive.undef.erlang")
	print("keyword.control.end.erlang")
	print("keyword.control.erlang")
	print("keyword.control.fun.erlang")
	print("keyword.control.if.erlang")
	print("keyword.control.query.erlang")
	print("keyword.control.receive.erlang")
	print("keyword.control.try.erlang")
	print("keyword.operator.assignment.erlang")
	print("keyword.operator.macro.erlang")
	print("keyword.operator.record.erlang")
	print("keyword.operator.symbolic.erlang")
	print("keyword.operator.textual.erlang")
	print("meta.directive.define.erlang")
	print("meta.directive.erlang")
	print("meta.directive.export.erlang")
	print("meta.directive.ifdef.erlang")
	print("meta.directive.ifndef.erlang")
	print("meta.directive.import.erlang")
	print("meta.directive.module.erlang")
	print("meta.directive.record.erlang")
	print("meta.directive.undef.erlang")
	print("meta.expression.begin.erlang")
	print("meta.expression.case.erlang")
	print("meta.expression.fun.erlang")
	print("meta.expression.if.erlang")
	print("meta.expression.parenthesized")
	print("meta.expression.query.erlang")
	print("meta.expression.receive.erlang")
	print("meta.expression.try.erlang")
	print("meta.function-call.erlang")
	print("meta.function.erlang")
	print("meta.macro-usage.erlang")
	print("meta.record-usage.erlang")
	print("meta.structure.binary.erlang")
	print("meta.structure.list.erlang")
	print("meta.structure.list.function.erlang")
	print("meta.structure.record.erlang")
	print("meta.structure.tuple.erlang")
	print("punctuation.definition.binary.begin.erlang")
	print("punctuation.definition.binary.end.erlang")
	print("punctuation.definition.character.erlang")
	print("punctuation.definition.class.record.begin.erlang")
	print("punctuation.definition.class.record.end.erlang")
	print("punctuation.definition.comment.erlang")
	print("punctuation.definition.escape.erlang")
	print("punctuation.definition.list.begin.erlang")
	print("punctuation.definition.list.end.erlang")
	print("punctuation.definition.parameters.begin.erlang")
	print("punctuation.definition.parameters.end.erlang")
	print("punctuation.definition.placeholder.erlang")
	print("punctuation.definition.string.begin.erlang")
	print("punctuation.definition.string.end.erlang")
	print("punctuation.definition.symbol.begin.erlang")
	print("punctuation.definition.symbol.end.erlang")
	print("punctuation.definition.tuple.begin.erlang")
	print("punctuation.definition.tuple.end.erlang")
	print("punctuation.section.directive.begin.erlang")
	print("punctuation.section.directive.end.erlang")
	print("punctuation.section.expression.begin.erlang")
	print("punctuation.section.expression.end.erlang")
	print("punctuation.separator.base-integer.erlang")
	print("punctuation.separator.binary.erlang")
	print("punctuation.separator.class.record.erlang")
	print("punctuation.separator.clause-head-body.erlang")
	print("punctuation.separator.clauses.erlang")
	print("punctuation.separator.define.erlang")
	print("punctuation.separator.expressions.erlang")
	print("punctuation.separator.float-exponent.erlang")
	print("punctuation.separator.function-arity.erlang")
	print("punctuation.separator.guards.erlang")
	print("punctuation.separator.integer-float.erlang")
	print("punctuation.separator.list.erlang")
	print("punctuation.separator.module-function.erlang")
	print("punctuation.separator.parameters.erlang")
	print("punctuation.separator.placeholder-parts.erlang")
	print("punctuation.separator.record-field.erlang")
	print("punctuation.separator.tuple.erlang")
	print("punctuation.separator.type-specifiers.erlang")
	print("punctuation.separator.value-size.erlang")
	print("punctuation.separator.value-type.erlang")
	print("punctuation.terminator.function.erlang")
	print("storage.modifier.endianness.erlang")
	print("storage.modifier.signedness.erlang")
	print("storage.modifier.unit.erlang")
	print("storage.type.erlang")
	print("string.quoted.double.erlang")
	print("variable.language.omitted.erlang")
	print("variable.language.omitted.field.erlang")
	print("variable.other.erlang")
	print("variable.other.field.erlang")
	return ""




def f_script():
	header = "F-SCRIPT"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.fscript\n")
	print("F-Script")
	print("comment.block.quotes.fscript")
	print("constant.character.escape.fscript")
	print("constant.language.fscript")
	print("constant.numeric.fscript")
	print("constant.other.block.compact.fscript")
	print("constant.other.symbol.fscript")
	print("entity.name.function.fscript")
	print("meta.block.content.fscript")
	print("meta.block.empty.fscript")
	print("meta.block.fscript")
	print("meta.block.header.fscript")
	print("meta.dummy.symbol.ignore.fscript")
	print("punctuation.definition.comment.begin.fscript")
	print("punctuation.definition.comment.end.fscript")
	print("punctuation.definition.string.begin.fscript")
	print("punctuation.definition.string.end.fscript")
	print("punctuation.definition.symbol.fscript")
	print("punctuation.section.block.fscript")
	print("string.quoted.single.fscript")
	print("variable.other.local.fscript")
	print("variable.parameter.block.fscript")
	return ""




def fortran():
	header = "FORTRAN"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.fortran\n")
	print("Fortran")
	print("comment.line.asterisk.fortran.modern")
	print("comment.line.c.fortran.punchcard-style")
	print("comment.line.exclamation.fortran.modern")
	print("constant.character.escape.fortran")
	print("constant.language.fortran")
	print("constant.numeric.fortran")
	print("entity.name.function.fortran")
	print("keyword.control.fortran")
	print("keyword.control.import.fortran")
	print("keyword.operator.fortran")
	print("keyword.operator.fortran.90")
	print("keyword.other.fortran")
	print("keyword.other.fortran.90")
	print("keyword.other.non-executable.fortran")
	print("meta.function.fortran")
	print("meta.preprocessor.fortran")
	print("meta.preprocessor.include.fortran")
	print("meta.tag.preprocessor.macro.fortran")
	print("punctuation.definition.comment.fortran")
	print("punctuation.definition.parameters.fortran")
	print("punctuation.definition.preprocessor.fortran")
	print("punctuation.definition.string.begin.fortran")
	print("punctuation.definition.string.end.fortran")
	print("storage.modifier.fortran")
	print("storage.type.fortran")
	print("string.quoted.double.fortran")
	print("string.quoted.double.include.fortran")
	print("string.quoted.other.lt-gt.include.fortran")
	print("string.quoted.single.fortran")
	return ""




def fxscript():
	header = "FXSCRIPT"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.fxscript\n")
	print("FXScript")
	print("comment.line.double-slash.fxscript")
	print("constant.character.escape.fxscript")
	print("constant.numeric.fxscript")
	print("constant.numeric.hex.fxscript")
	print("entity.name.function.color.alpha.fxscript")
	print("entity.name.function.color.blue.fxscript")
	print("entity.name.function.color.chroma-u.fxscript")
	print("entity.name.function.color.chroma-v.fxscript")
	print("entity.name.function.color.green.fxscript")
	print("entity.name.function.color.luma.fxscript")
	print("entity.name.function.color.red.fxscript")
	print("entity.name.function.fxscript")
	print("keyword.control.fxscrpt")
	print("keyword.operator.arithmetic.fxscrpt")
	print("keyword.other.definition-statements.fxscript")
	print("keyword.other.input-control.fxscript")
	print("meta.function.fxscript")
	print("punctuation.definition.comment.fxscript")
	print("punctuation.definition.string.begin.fxscript")
	print("punctuation.definition.string.end.fxscript")
	print("storage.type.fxscript")
	print("string.quoted.double.fxscript")
	print("support.constant.color.fxscript")
	print("support.constant.colorspace.fxscript")
	print("support.constant.formatting.fxscript")
	print("support.constant.general.fxscript")
	print("support.constant.key.fxscript")
	print("support.constant.shapes.fxscript")
	print("support.constant.text.fxscript")
	print("support.function.blit.fxscript")
	print("support.function.clip.fxscript")
	print("support.function.composite.fxscript")
	print("support.function.debug.fxscript")
	print("support.function.distort.fxscript")
	print("support.function.external.fxscript")
	print("support.function.geometry.fxscript")
	print("support.function.joe.fxscript")
	print("support.function.key.fxscript")
	print("support.function.math.fxscript")
	print("support.function.parser.fxscript")
	print("support.function.process.fxscript")
	print("support.function.shapes.process.fxscript")
	print("support.function.string.fxscript")
	print("support.function.text.fxscript")
	print("support.function.transform.fxscript")
	print("support.function.undocumented.fxscript")
	print("support.function.utility.fxscript")
	print("support.type.fxscript")
	print("support.variable.predeclared.fxscript")
	print("variable.other.global.fxscript")
	print("variable.parameter.function.fxscript")
	return ""




def greasemonkey():
	header = "GREASEMONKEY"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.js.greasemonkey\n")
	print("Greasemonkey")
	print("keyword.other.greasemonkey")
	print("meta.directive.nonstandard.greasemonkey")
	print("meta.directive.standard.greasemonkey")
	print("meta.header.greasemonkey")
	print("string.unquoted.greasemonkey")
	print("support.class.greasemonkey")
	print("support.function.greasemonkey")
	return ""




def gri():
	header = "GRI"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.gri\n")
	print("Gri")
	print("comment.line.double-slash.gri")
	print("comment.line.number-sign.gri")
	print("constant.numeric.gri")
	print("entity.name.function.gri")
	print("keyword.control.gri")
	print("keyword.operator.arithmetic.gri")
	print("keyword.operator.assignment.gri")
	print("keyword.operator.comparison.gri")
	print("meta.function.gri")
	print("punctuation.definition.comment.gri")
	print("punctuation.definition.function.gri")
	print("punctuation.definition.heredoc.gri")
	print("punctuation.definition.string.begin.gri")
	print("punctuation.definition.string.end.gri")
	print("punctuation.definition.variable.gri")
	print("punctuation.separator.continuation.gri")
	print("string.quoted.double.gri")
	print("string.unquoted.heredoc.doublequote.gri")
	print("variable.other.synonym.gri")
	print("variable.other.variable.gri")
	print("variable.other.variabledot.gri")
	return ""




def groovy():
	header = "GROOVY"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.groovy.groovy\n")
	print("Groovy")
	print("comment.block.documentation.groovy")
	print("comment.block.empty.groovy")
	print("comment.block.groovy")
	print("comment.line.double-slash.groovy")
	print("constant.character.escape.groovy")
	print("constant.language.groovy")
	print("constant.numeric.groovy")
	print("constant.other.groovy")
	print("entity.name.function.constructor.groovy")
	print("entity.name.function.groovy")
	print("entity.name.function.package.groovy")
	print("entity.name.type.class.groovy")
	print("keyword.control.catch-exception.groovy")
	print("keyword.control.groovy")
	print("keyword.operator.arithmetic.groovy")
	print("keyword.operator.comparison.groovy")
	print("keyword.operator.groovy")
	print("keyword.operator.increment-decrement.groovy")
	print("keyword.operator.logical.groovy")
	print("keyword.other.class-fns.groovy")
	print("keyword.other.documentation.link.groovy")
	print("keyword.other.documentation.params.groovy")
	print("keyword.other.documentation.value.groovy")
	print("meta.definition.class.extends.groovy")
	print("meta.definition.class.groovy")
	print("meta.definition.class.implements.groovy")
	print("meta.definition.constructor.groovy")
	print("meta.definition.method.groovy")
	print("meta.definition.param-list.groovy")
	print("meta.definition.throws.groovy")
	print("meta.import.groovy")
	print("meta.package.groovy")
	print("storage.modifier.access-control.groovy")
	print("storage.modifier.groovy")
	print("storage.type.groovy")
	print("string.quoted.double.groovy")
	print("string.quoted.single.groovy")
	print("support.type.built-ins.groovy")
	print("support.type.groovy")
	print("variable.language.groovy")
	print("variable.parameter.documentation.groovy")
	return ""




def gtd():
	header = "GTD"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.plain.gtd\n")
	print("GTD")
	print("comment.line.gtd")
	print("constant.language.gtd")
	print("entity.name.tag.gtd")
	print("markup.other.pagename")
	print("string.unquoted.gtd")
	print("support.class.exception.gtd")
	print("variable.language.gtd")
	return ""




def gtdalt():
	header = "GTDALT"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.gtdalt\n")
	print("GTDalt")
	print("comment.line.number-sign.action.completed.gtdalt")
	print("comment.line.number-sign.generic.gtdalt")
	print("comment.line.slash.action.archived.gtdalt")
	print("constant.other.title.gtdalt")
	print("entity.name.section.project.title.gtdalt")
	print("keyword.control.project.begin.gtdalt")
	print("keyword.control.project.end.gtdalt")
	print("keyword.operator.due.gtdalt")
	print("markup.underline.link.gtdalt")
	print("meta.action.archived.gtdalt")
	print("meta.action.completed.gtdalt")
	print("meta.action.gtdalt")
	print("meta.action.only-context.gtdalt")
	print("meta.line.project.begin.gtdalt")
	print("meta.line.project.end.gtdalt")
	print("meta.note.gtdalt")
	print("meta.project.archived.gtdalt")
	print("meta.project.begin.gtdalt")
	print("meta.project.newline.gtdalt")
	print("punctuation.definition.comment.gtdalt")
	print("punctuation.definition.completed.gtdalt")
	print("punctuation.definition.context.action.gtdalt")
	print("punctuation.definition.date.gtdalt")
	print("punctuation.definition.due.gtdalt")
	print("punctuation.definition.link.gtdalt")
	print("punctuation.definition.note.gtdalt")
	print("punctuation.definition.note.note.gtdalt")
	print("punctuation.separator.archived.gtdalt")
	print("punctuation.separator.key-value.due.gtdalt")
	print("storage.type.context.action.archived.gtdalt")
	print("storage.type.context.action.gtdalt")
	print("string.quoted.other.timestamp.action.archived.gtdalt")
	print("string.quoted.other.timestamp.action.completed.gtdalt")
	print("string.quoted.other.timestamp.due.gtdalt")
	print("string.quoted.other.timestamp.project.archived.gtdalt")
	print("support.other.note.gtdalt")
	print("support.other.project.action.archived.gtdalt")
	print("support.other.project.archived.gtdalt")
	return ""




def haml():
	header = "HAML"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.haml\n")
	print("Haml")
	print("comment.block.haml")
	print("comment.line.number-sign.ruby")
	print("comment.line.slash.haml")
	print("entity.name.tag.class.haml")
	print("entity.name.tag.haml")
	print("entity.name.tag.id.haml")
	print("keyword.control.ruby.start-block")
	print("meta.escape.haml")
	print("meta.line.ruby.haml")
	print("meta.prolog.haml")
	print("meta.section.attributes.haml")
	print("meta.section.object.haml")
	print("meta.tag.haml")
	print("punctuation.definition.prolog.haml")
	print("punctuation.definition.tag.haml")
	print("punctuation.section.comment.haml")
	print("punctuation.separator.continuation.haml")
	print("punctuation.terminator.tag.haml")
	print("source.ruby.embedded.html")
	return ""




def haskell():
	header = "HASKELL"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.haskell\n")
	print("Haskell")
	print("comment.block.haskell")
	print("comment.line.double-dash.haskell")
	print("constant.character.escape.haskell")
	print("constant.other.haskell")
	print("entity.name.function.builtin.prelude.haskell")
	print("entity.name.function.haskell")
	print("entity.name.function.infix.haskell")
	print("keyword.control.haskell")
	print("keyword.operator.haskell")
	print("keyword.other.haskell")
	print("meta.function.type-declaration.haskell")
	print("meta.preprocessor.haskell")
	print("punctuation.definition.comment.haskell")
	print("punctuation.definition.entity.haskell")
	print("punctuation.definition.preprocessor.haskell")
	print("punctuation.definition.string.begin.haskell")
	print("punctuation.definition.string.end.haskell")
	print("punctuation.separator.arrow.haskell")
	print("punctuation.separator.big-arrow.haskell")
	print("punctuation.separator.double-colon.haskell")
	print("punctuation.separator.equal-sign.haskell")
	print("punctuation.separator.pipe-sign.haskell")
	print("string.quoted.double.haskell")
	print("string.quoted.single.haskell")
	print("variable.other.generic-type.haskell")
	return ""




def html_asp():
	header = "HTML-ASP"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.html.asp\n")
	print("comment.line.apostrophe.asp")
	print("punctuation.definition.comment.asp")
	print("punctuation.section.embedded.begin.asp")
	print("punctuation.section.embedded.end.asp")
	print("source.asp.embedded.html")
	return ""




def html():
	header = "HTML"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.html.basic\n")
	print("HTML")
	print("comment.block.erb")
	print("comment.block.html")
	print("comment.block.js")
	print("comment.line.double-slash.js")
	print("comment.line.number-sign.ruby")
	print("comment.line.number-sign.ruby.nitro")
	print("constant.character.entity.html")
	print("constant.other.inline-data.html")
	print("entity.name.tag.block.any.html")
	print("entity.name.tag.doctype.html")
	print("entity.name.tag.html")
	print("entity.name.tag.inline.any.html")
	print("entity.name.tag.other.html")
	print("entity.name.tag.script.html")
	print("entity.name.tag.structure.any.html")
	print("entity.name.tag.style.html")
	print("entity.name.tag.xml.html")
	print("entity.other.attribute-name.html")
	print("entity.other.attribute-name.id.html")
	print("invalid.illegal.bad-ampersand.html")
	print("invalid.illegal.bad-angle-bracket.html")
	print("invalid.illegal.bad-comments-or-CDATA.html")
	print("invalid.illegal.incomplete.html")
	print("meta.attribute-with-value.id.html")
	print("meta.scope.between-tag-pair.html")
	print("meta.tag.any.html")
	print("meta.tag.block.any.html")
	print("meta.tag.inline.any.html")
	print("meta.tag.other.html")
	print("meta.tag.preprocessor.xml.html")
	print("meta.tag.sgml.doctype.html")
	print("meta.tag.sgml.html")
	print("meta.tag.structure.any.html")
	print("punctuation.definition.comment.erb")
	print("punctuation.definition.comment.html")
	print("punctuation.definition.comment.js")
	print("punctuation.definition.comment.ruby")
	print("punctuation.definition.comment.ruby.nitro")
	print("punctuation.definition.entity.html")
	print("punctuation.definition.string.begin.html")
	print("punctuation.definition.string.end.html")
	print("punctuation.definition.tag.html")
	print("punctuation.section.embedded.ruby")
	print("punctuation.section.embedded.ruby.nitro")
	print("punctuation.separator.key-value.html")
	print("source.css.embedded.html")
	print("source.js.embedded.html")
	print("source.php.embedded.block.html")
	print("source.php.embedded.line.empty.html")
	print("source.php.embedded.line.empty.whitespace.html")
	print("source.php.embedded.line.html")
	print("source.python.embedded.html")
	print("source.ruby.embedded.html")
	print("source.ruby.nitro.embedded.html")
	print("source.smarty.embedded.html")
	print("string.quoted.double.doctype.identifiers-and-DTDs.html")
	print("string.quoted.double.html")
	print("string.quoted.single.html")
	print("support.function.built-in.smarty")
	return ""




def html_django():
	header = "HTML_DJANGO"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.html.django\n")
	print("comment.block.django.template")
	print("entity.other.django.tagbraces")
	print("keyword.control.django.template")
	print("keyword.operator.django.template")
	print("meta.scope.django.template.tag")
	print("string.other.django.template.tag")
	print("string.unquoted.django.template.tag")
	print("support.function.filter.django")
	print("variable.other.django.template")
	return ""




def html_for_aspdotnet():
	header = "HTML_FOR_ASP.NET"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.html.asp.net\n")
	print("comment.block.html")
	print("comment.line.double-slash.php")
	print("comment.line.number-sign.php")
	print("comment.line.number-sign.ruby")
	print("constant.character.entity.html")
	print("constant.other.inline-data.html")
	print("entity.name.tag.block.any.html")
	print("entity.name.tag.doctype.html")
	print("entity.name.tag.html")
	print("entity.name.tag.inline.any.html")
	print("entity.name.tag.other.html")
	print("entity.name.tag.script.html")
	print("entity.name.tag.structure.any.html")
	print("entity.name.tag.style.html")
	print("entity.name.tag.xml.html")
	print("entity.other.attribute-name.html")
	print("entity.other.attribute-name.id.html")
	print("invalid.illegal.bad-ampersand.html")
	print("invalid.illegal.bad-angle-bracket.html")
	print("invalid.illegal.bad-comments-or-CDATA.html")
	print("invalid.illegal.incomplete.html")
	print("meta.attribute-with-value.id.html")
	print("meta.scope.between-tag-pair.html")
	print("meta.source.embedded")
	print("meta.source.embedded.asp.include")
	print("meta.source.embedded.bound")
	print("meta.source.embedded.return-value")
	print("meta.source.embedded.script-tag")
	print("meta.source.embedded.single-line")
	print("meta.tag.block.any.html")
	print("meta.tag.html")
	print("meta.tag.inline.any.html")
	print("meta.tag.other.html")
	print("meta.tag.preprocessor.xml.html")
	print("meta.tag.sgml.doctype.html")
	print("meta.tag.sgml.html")
	print("meta.tag.structure.any.html")
	print("punctuation.definition.comment.asp.net")
	print("punctuation.definition.comment.php")
	print("punctuation.definition.comment.ruby")
	print("punctuation.definition.entity.html")
	print("punctuation.definition.string.begin.html")
	print("punctuation.definition.string.end.html")
	print("punctuation.definition.tag.asp")
	print("punctuation.definition.tag.asp.net")
	print("punctuation.definition.tag.html")
	print("punctuation.section.embedded.begin.asp")
	print("punctuation.section.embedded.begin.php")
	print("punctuation.section.embedded.begin.ruby")
	print("punctuation.section.embedded.end.asp")
	print("punctuation.section.embedded.end.php")
	print("punctuation.section.embedded.end.ruby")
	print("punctuation.section.embedded.php")
	print("punctuation.section.embedded.smarty")
	print("punctuation.separator.key-value.html")
	print("source.asp.embedded.html")
	print("source.css.embedded.html")
	print("source.js.embedded.html")
	print("source.php.embedded.html")
	print("source.ruby.embedded.html")
	print("source.smarty.embedded.html")
	print("string.quoted.double.doctype.identifiers-and-DTDs.html")
	print("string.quoted.double.html")
	print("string.quoted.single.html")
	print("support.function.built-in.smarty")
	return ""




def html_mason():
	header = "HTML_MASON"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.html.mason\n")
	print("comment.block")
	print("entity.name.function")
	print("keyword.control")
	print("punctuation.section.embedded.perl.mason")
	print("source.mason.args")
	print("source.mason.component")
	print("source.mason.component.block")
	print("source.mason.methods")
	print("source.mason.nesty")
	print("source.mason.substitution")
	print("source.perl.mason.block")
	print("source.perl.mason.doc")
	print("source.perl.mason.line")
	print("string.quoted.single")
	print("variable.other")
	return ""




def html_rails():
	header = "HTML_RAILS"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.html.ruby\n")
	print("comment.block.erb")
	print("comment.line.number-sign.ruby")
	print("punctuation.definition.comment.erb")
	print("punctuation.definition.comment.ruby")
	print("punctuation.section.embedded.ruby")
	print("source.ruby.rails.embedded.html")
	return ""




def html_tcl():
	header = "HTML_TCL"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.html.tcl\n")
	print("keyword.other.tcl.aolserver")
	print("punctuation.section.embedded.begin.tcl")
	print("punctuation.section.embedded.end.tcl")
	print("source.tcl.embedded.html")
	return ""




def icalendar():
	header = "ICALENDAR"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.icalendar\n")
	print("constant.numeric.icalendar")
	print("entity.name.section.icalendar")
	print("iCalendar")
	print("keyword.other.component-begin.icalendar")
	print("keyword.other.component-end.icalendar")
	print("punctuation.definition.string.begin.icalendar")
	print("punctuation.definition.string.end.icalendar")
	print("string.quoted.double.icalendar")
	return ""




def inform():
	header = "INFORM"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.inform\n")
	print("Inform")
	print("comment.line.exclamation.inform")
	print("constant.character.escape.inform")
	print("constant.numeric.inform")
	print("entity.name.function.inform")
	print("keyword.control.inform")
	print("keyword.other.directive.inform")
	print("meta.function.inform")
	print("punctuation.definition.comment.inform")
	print("punctuation.definition.string.begin.inform")
	print("punctuation.definition.string.end.inform")
	print("string.quoted.double.inform")
	print("string.quoted.single.inform")
	return ""




def ini():
	header = "INI"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.ini\n")
	print("Ini")
	print("comment.line.number-sign.ini")
	print("comment.line.semicolon.ini")
	print("constant.character.escape.ini")
	print("entity.name.section.group-title.ini")
	print("keyword.other.definition.ini")
	print("punctuation.definition.comment.ini")
	print("punctuation.definition.entity.ini")
	print("punctuation.definition.string.begin.ini")
	print("punctuation.definition.string.end.ini")
	print("punctuation.separator.key-value.ini")
	print("string.quoted.double.ini")
	print("string.quoted.single.ini")
	return ""




def installer_distribution_script():
	header = "INSTALLER_DISTRIBUTION_SCRIPT"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.xml.apple-dist\n")
	print("entity.name.tag.xml")
	print("meta.tag.xml")
	print("punctuation.definition.tag.xml")
	print("source.js.embedded.apple-dist")
	print("support.class.apple-dist")
	print("support.function.apple-dist")
	print("support.variable.apple-dist")
	return ""




def io():
	header = "IO"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.io\n")
	print("Io")
	print("comment.block.io")
	print("comment.line.double-slash.io")
	print("comment.line.number-sign.io")
	print("constant.character.escape.io")
	print("constant.language.io")
	print("constant.numeric.io")
	print("constant.other.io")
	print("keyword.control.io")
	print("keyword.operator.io")
	print("meta.comma-parenthesis.io")
	print("meta.empty-parenthesis.io")
	print("punctuation.definition.comment.io")
	print("punctuation.definition.string.begin.io")
	print("punctuation.definition.string.end.io")
	print("string.quoted.double.io")
	print("string.quoted.triple.io")
	print("support.class.io")
	print("support.function.io")
	print("support.function.open-gl.io")
	print("variable.language.io")
	print("variable.other.global.io")
	return ""




def java():
	header = "JAVA"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.java\n")
	print("Java")
	print("comment.block.documentation.java")
	print("comment.block.empty.java")
	print("comment.block.java")
	print("comment.line.double-slash.java")
	print("constant.character.escape.java")
	print("constant.language.java")
	print("constant.numeric.java")
	print("constant.other.java")
	print("entity.name.function.constructor.java")
	print("entity.name.function.java")
	print("entity.name.function.package.java")
	print("entity.name.type.class.java")
	print("entity.name.type.import.java")
	print("keyword.control.catch-exception.java")
	print("keyword.control.java")
	print("keyword.operator.arithmetic.java")
	print("keyword.operator.comparison.java")
	print("keyword.operator.increment-decrement.java")
	print("keyword.operator.java")
	print("keyword.operator.logical.java")
	print("keyword.other.class-fns.java")
	print("keyword.other.documentation.javadoc.java")
	print("keyword.other.documentation.javadoc.link.java")
	print("meta.definition.class.extends.java")
	print("meta.definition.class.implements.java")
	print("meta.definition.class.java")
	print("meta.definition.constructor.java")
	print("meta.definition.method.java")
	print("meta.definition.param-list.java")
	print("meta.definition.throws.java")
	print("meta.import.java")
	print("meta.package.java")
	print("punctuation.definition.comment.java")
	print("punctuation.definition.string.begin.java")
	print("punctuation.definition.string.end.java")
	print("storage.modifier.access-control.java")
	print("storage.modifier.java")
	print("storage.type.java")
	print("string.quoted.double.java")
	print("string.quoted.single.java")
	print("support.type.built-ins.java")
	print("support.type.java")
	print("variable.language.java")
	return ""




def javaproperties():
	header = "JAVAPROPERTIES"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.java-props\n")
	print("comment.line.number-sign.java-props")
	print("keyword.other.java-props")
	print("punctuation.definition.comment.java-props")
	print("punctuation.separator.key-value.java-props")
	return ""




def javascript():
	header = "JAVASCRIPT"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.js\n")
	print("JavaScript")
	print("comment.block.documentation.js")
	print("comment.block.html.js")
	print("comment.block.js")
	print("comment.line.double-slash.js")
	print("constant.character.escape.js")
	print("constant.language.boolean.false.js")
	print("constant.language.boolean.true.js")
	print("constant.language.js")
	print("constant.language.null.js")
	print("constant.numeric.js")
	print("entity.name.function.js")
	print("entity.name.type.instance.js")
	print("entity.name.type.object.js.firebug")
	print("keyword.control.js")
	print("keyword.operator.js")
	print("keyword.operator.new.js")
	print("keyword.other.js")
	print("meta.brace.curly.js")
	print("meta.brace.round.js")
	print("meta.brace.square.js")
	print("meta.class.instance.constructor")
	print("meta.class.js")
	print("meta.delimiter.method.period.js")
	print("meta.delimiter.object.comma.js")
	print("meta.function.js")
	print("meta.function.json.js")
	print("meta.function.prototype.js")
	print("punctuation.definition.comment.html.js")
	print("punctuation.definition.comment.js")
	print("punctuation.definition.parameters.begin.js")
	print("punctuation.definition.parameters.end.js")
	print("punctuation.definition.string.begin.js")
	print("punctuation.definition.string.end.js")
	print("punctuation.terminator.statement.js")
	print("storage.modifier.js")
	print("storage.type.function.js")
	print("storage.type.js")
	print("string.quoted.double.js")
	print("string.quoted.single.js")
	print("string.regexp.js")
	print("support.class.js")
	print("support.constant.dom.js")
	print("support.constant.js")
	print("support.function.dom.js")
	print("support.function.event-handler.js")
	print("support.function.js")
	print("support.function.js.firebug")
	print("variable.language.js")
	print("variable.parameter.function.js")
	return ""




def javascript_plus_prototype():
	header = "JAVASCRIPT_+_PROTOTYPE"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.js.prototype\n")
	print("meta.even-tab.group10.spaces")
	print("meta.even-tab.group10.tab")
	print("meta.even-tab.group2.spaces")
	print("meta.even-tab.group2.tab")
	print("meta.even-tab.group4.spaces")
	print("meta.even-tab.group4.tab")
	print("meta.even-tab.group6.spaces")
	print("meta.even-tab.group6.tab")
	print("meta.even-tab.group8.spaces")
	print("meta.even-tab.group8.tab")
	print("meta.leading-tabs")
	print("meta.odd-tab.group1.spaces")
	print("meta.odd-tab.group1.tab")
	print("meta.odd-tab.group11.spaces")
	print("meta.odd-tab.group11.tab")
	print("meta.odd-tab.group3.spaces")
	print("meta.odd-tab.group3.tab")
	print("meta.odd-tab.group5.spaces")
	print("meta.odd-tab.group5.tab")
	print("meta.odd-tab.group7.spaces")
	print("meta.odd-tab.group7.tab")
	print("meta.odd-tab.group9.spaces")
	print("meta.odd-tab.group9.tab")
	print("support.class.prototype.js")
	print("support.function.js.prototype")
	print("variable.other.js.prototype")
	return ""




def javascript_plus_prototype_bracketed():
	header = "JAVASCRIPT_+_PROTOTYPE_BRACKETED"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.js.prototype.bracketed\n")
	print("comment.block.conditional.js")
	print("constant.other.object.key.js.prototype")
	print("invalid.illegal.delimiter.object.comma.js")
	print("keyword.control.conditional.js")
	print("keyword.operator.conditional.js")
	print("meta.group.braces.curly")
	print("meta.group.braces.curly.function.js.prototype")
	print("meta.group.braces.round")
	print("meta.group.braces.square")
	print("meta.source.embedded")
	print("meta.source.embedded.return-value")
	print("punctuation.definition.comment.js")
	print("punctuation.definition.keyword.js")
	print("punctuation.definition.string.js.prototype")
	print("punctuation.definition.variable.js")
	print("punctuation.section.embedded.begin.js")
	print("punctuation.section.embedded.end.js")
	print("punctuation.section.function.js.prototype")
	print("punctuation.section.scope.js")
	print("punctuation.separator.objects.js.prototype")
	print("source.ruby.rails.embedded.html")
	print("string.quoted.double.js.prototype")
	print("string.quoted.single.js.prototype")
	print("variable.other.conditional.js")
	return ""




def jquery_javascript():
	header = "JQUERY_JAVASCRIPT"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.js.jquery\n")
	print("entity.name.tag.css")
	print("entity.name.tag.wildcard.css")
	print("entity.other.attribute-name.class.css")
	print("entity.other.attribute-name.id.css")
	print("entity.other.attribute-name.pseudo-class.css")
	print("meta.selector.css")
	print("punctuation.definition.attribute-name.css")
	print("punctuation.definition.selector.begin.js")
	print("punctuation.definition.selector.end.js")
	print("punctuation.section.class.js")
	print("punctuation.section.function.js")
	print("punctuation.section.scope.js")
	print("support.class.js.jquery")
	print("support.function.js.jquery")
	return ""




def json():
	header = "JSON"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.json\n")
	print("JSON")
	print("constant.character.escape.json")
	print("constant.language.json")
	print("constant.numeric.json")
	print("invalid.illegal.expected-array-separator.json")
	print("invalid.illegal.expected-dictionary-separator.json")
	print("invalid.illegal.unrecognized-string-escape.json")
	print("meta.structure.array.json")
	print("meta.structure.dictionary.json")
	print("meta.structure.dictionary.value.json")
	print("punctuation.definition.array.begin.json")
	print("punctuation.definition.array.end.json")
	print("punctuation.definition.dictionary.begin.json")
	print("punctuation.definition.dictionary.end.json")
	print("punctuation.definition.string.begin.json")
	print("punctuation.definition.string.end.json")
	print("punctuation.separator.array.json")
	print("punctuation.separator.dictionary.key-value.json")
	print("punctuation.separator.dictionary.pair.json")
	print("string.quoted.double.json")
	return ""




def languagedefinition():
	header = "LANGUAGEDEFINITION"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.plist.tm-grammar\n")
	print("comment.block.tm-grammar")
	print("comment.line.double-slash.tm-grammar")
	print("constant.character.escape.apostrophe.tm-grammar")
	print("constant.character.escape.tm-grammar")
	print("constant.numeric.tm-grammar")
	print("constant.other.reference.grammar.tm-grammar")
	print("constant.other.reference.repository-item.tm-grammar")
	print("constant.other.scope.tm-grammar")
	print("entity.name.section.repository.tm-grammar")
	print("invalid.deprecated.constant.tm-grammar")
	print("invalid.deprecated.scope_not_allowed.tm-grammar")
	print("invalid.illegal.constant.misplaced-keyword.tm-grammar")
	print("invalid.illegal.constant.outdated.tm-grammar")
	print("invalid.illegal.constant.unknown-keyword.tm-grammar")
	print("invalid.illegal.missing-comma.tm-grammar")
	print("invalid.illegal.unrecognized-character.tm-grammar")
	print("meta.array.patterns.tm-grammar")
	print("meta.dictionary.captures.tm-grammar")
	print("meta.dictionary.repository.tm-grammar")
	print("meta.dictionary.rule.tm-grammar")
	print("meta.value-pair.repository-item.tm-grammar")
	print("meta.value-pair.scopename.tm-grammar")
	print("meta.value-pair.tm-grammar")
	print("punctuation.definition..tm-grammar")
	print("punctuation.definition.constant.tm-grammar")
	print("punctuation.definition.string.begin.tm-grammar")
	print("punctuation.definition.string.end.tm-grammar")
	print("punctuation.section.array.tm-grammar")
	print("punctuation.section.dictionary.tm-grammar")
	print("punctuation.separator.array.tm-grammar")
	print("punctuation.separator.key-value.tm-grammar")
	print("punctuation.terminator.dictionary.tm-grammar")
	print("string.quoted.double.include.tm-grammar")
	print("string.quoted.double.scope.root.tm-grammar")
	print("string.quoted.double.scope.tm-grammar")
	print("string.quoted.double.tm-grammar")
	print("string.quoted.single.include.tm-grammar")
	print("string.quoted.single.scope.root.tm-grammar")
	print("string.quoted.single.scope.tm-grammar")
	print("string.quoted.single.tm-grammar")
	print("string.regexp.oniguruma.double.tm-grammar")
	print("string.regexp.oniguruma.single.tm-grammar")
	print("string.unquoted.tm-grammar")
	print("support.constant.repository.tm-grammar")
	print("support.constant.tm-grammar")
	return ""




def latex():
	header = "LATEX"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.tex.latex\n")
	print("LaTeX")
	print("comment.line.percentage.latex")
	print("constant.character.latex")
	print("constant.other.reference.citation.latex")
	print("constant.other.reference.label.latex")
	print("entity.name.section.latex")
	print("invalid.illegal.string.quoted.double.latex")
	print("invalid.illegal.string.quoted.single.latex")
	print("keyword.control.cite.latex")
	print("keyword.control.include.latex")
	print("keyword.control.label.latex")
	print("keyword.control.preamble.latex")
	print("keyword.control.ref.latex")
	print("keyword.other.item.latex")
	print("markup.raw.verb.latex")
	print("meta.cell.environment.tabular.latex")
	print("meta.citation.latex")
	print("meta.column-specials.latex")
	print("meta.definition.label.latex")
	print("meta.escape-character.latex")
	print("meta.function.begin-document.latex")
	print("meta.function.embedded.java.latex")
	print("meta.function.embedded.python.latex")
	print("meta.function.emph.latex")
	print("meta.function.end-document.latex")
	print("meta.function.environment.general.latex")
	print("meta.function.environment.list.latex")
	print("meta.function.environment.math.latex")
	print("meta.function.environment.tabular.latex")
	print("meta.function.section.latex")
	print("meta.function.textbf.latex")
	print("meta.function.textit.latex")
	print("meta.function.texttt.latex")
	print("meta.function.verb.latex")
	print("meta.function.verbatim.latex")
	print("meta.include.latex")
	print("meta.preamble.latex")
	print("meta.reference.label.latex")
	print("meta.row.environment.tabular.latex")
	print("meta.scope.item.latex")
	print("meta.space-after-command.latex")
	print("punctuation.definition.arguments.begin.latex")
	print("punctuation.definition.arguments.end.latex")
	print("punctuation.definition.arguments.latex")
	print("punctuation.definition.arguments.optional.begin.latex")
	print("punctuation.definition.arguments.optional.end.latex")
	print("punctuation.definition.column-specials.begin.latex")
	print("punctuation.definition.column-specials.end.latex")
	print("punctuation.definition.constant.latex")
	print("punctuation.definition.emph.begin.latex")
	print("punctuation.definition.emph.end.latex")
	print("punctuation.definition.footnote.begin.latex")
	print("punctuation.definition.footnote.end.latex")
	print("punctuation.definition.function.latex")
	print("punctuation.definition.keyword.latex")
	print("punctuation.definition.marginpar.begin.latex")
	print("punctuation.definition.marginpar.end.latex")
	print("punctuation.definition.string.begin.latex")
	print("punctuation.definition.string.end.latex")
	print("punctuation.definition.table.cell.latex")
	print("punctuation.definition.table.row.latex")
	print("punctuation.definition.textbf.begin.latex")
	print("punctuation.definition.textbf.end.latex")
	print("punctuation.definition.textit.begin.latex")
	print("punctuation.definition.textit.end.latex")
	print("punctuation.definition.texttt.begin.latex")
	print("punctuation.definition.texttt.end.latex")
	print("punctuation.definition.verb.latex")
	print("storage.type.function.latex")
	print("string.other.math.latex")
	print("string.quoted.double.european.latex")
	print("string.quoted.double.guillemot.latex")
	print("string.quoted.double.latex")
	print("support.function.be.latex")
	print("support.function.emph.latex")
	print("support.function.footnote.latex")
	print("support.function.marginpar.latex")
	print("support.function.section.latex")
	print("support.function.textbf.latex")
	print("support.function.textit.latex")
	print("support.function.texttt.latex")
	print("support.function.verb.latex")
	print("variable.parameter.definition.label.latex")
	print("variable.parameter.function.latex")
	print("variable.parameter.latex")
	return ""




def latex_beamer():
	header = "LATEX_BEAMER"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.tex.latex.beamer\n")
	print("entity.name.function.frame.latex")
	print("meta.function.environment.frame.latex")
	print("punctuation.definition.arguments.begin.latex")
	print("punctuation.definition.arguments.end.latex")
	print("punctuation.definition.function.latex")
	print("support.function.be.latex")
	print("support.function.with-arg.latex")
	print("variable.parameter.function.latex")
	return ""




def latex_log():
	header = "LATEX_LOG"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.log.latex\n")
	print("comment.block.documentation")
	print("entity.name.function")
	print("entity.name.function.filename.latex")
	print("entity.name.tag.configuration")
	print("entity.name.tag.definition")
	print("entity.name.type.class")
	print("invalid.deprecated")
	print("invalid.illegal")
	print("keyword.control.hyphenation.latex")
	print("meta.log.latex.fixme")
	print("meta.log.latex.hyphenation")
	print("punctuation.definition.string.begin.log.latex")
	print("punctuation.definition.string.end.log.latex")
	print("string.unquoted.other.filename.log.latex")
	print("support.function.with-arg.latex")
	print("variable.parameter.hyphenation.latex2")
	return ""




def latex_memoir():
	header = "LATEX_MEMOIR"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.tex.latex.memoir\n")
	print("meta.function.memoir-alltt.latex")
	print("meta.function.memoir-fbox.latex")
	print("meta.function.memoir-verbatim.latex")
	print("punctuation.definition.arguments.begin.latex")
	print("punctuation.definition.arguments.end.latex")
	print("punctuation.definition.function.latex")
	print("punctuation.definition.function.tex")
	print("support.function.be.latex")
	print("support.function.general.tex")
	print("variable.parameter.function.latex")
	return ""




def lexflex():
	header = "LEXFLEX"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.lex\n")
	print("Lex/Flex")
	print("comment.block.c.lex")
	print("constant.character.escape.lex")
	print("constant.other.character-class.set.lex")
	print("entity.name.function.lex")
	print("invalid.illegal.ignored.lex")
	print("invalid.illegal.lex")
	print("invalid.illegal.regexp.lex")
	print("keyword.control.anchor.regexp.lex")
	print("keyword.operator.eof.lex")
	print("keyword.operator.negation.regexp.lex")
	print("keyword.operator.quantifier.regexp.lex")
	print("keyword.operator.trailing-match.regexp.lex")
	print("keyword.other.option.lex")
	print("keyword.other.start-condition.lex")
	print("meta.definition.lex")
	print("meta.embedded.source.c.lex")
	print("meta.group.regexp.lex")
	print("meta.options.lex")
	print("meta.rule.action.lex")
	print("meta.rule.lex")
	print("meta.section.definitions.lex")
	print("meta.section.rules.lex")
	print("meta.start-condition.lex")
	print("punctuation.definition.character-class.set.lex")
	print("punctuation.definition.code.lex")
	print("punctuation.definition.group.regexp.lex")
	print("punctuation.definition.start-condition.lex")
	print("punctuation.separator.sections.lex")
	print("punctuation.terminator.character-class.set.lex")
	print("punctuation.terminator.code.lex")
	print("punctuation.terminator.group.regexp.lex")
	print("string.quoted.double.regexp.lex")
	print("string.regexp.lex")
	print("support.function.c.lex")
	print("support.other.option.lex")
	print("variable.other.lex")
	return ""




def lighttpd():
	header = "LIGHTTPD"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.lighttpd-config\n")
	print("Lighttpd")
	print("comment.line.number-sign.lighttpd-config")
	print("constant.character.escape.quote.lighttpd-config")
	print("constant.numeric.lighttpd-config")
	print("invalid.illegal.semicolon-at-end-of-line.lighttpd-config")
	print("punctuation.definition.comment.lighttpd-config")
	print("punctuation.definition.string.begin.lighttpd-config")
	print("punctuation.definition.string.end.lighttpd-config")
	print("punctuation.definition.variable.lighttpd-config")
	print("punctuation.separator.key-value.lighttpd-config")
	print("string.quoted.double.lighttpd-config")
	print("string.regexp.lighttpd-config")
	print("support.constant.name.lighttpd-config")
	print("variable.language.lighttpd-config")
	return ""




def lilypond():
	header = "LILYPOND"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.lilypond\n")
	print("Lilypond")
	print("comment.block.lilypond")
	print("comment.line.lilypond")
	print("constant.character.escape.lilypond")
	print("constant.language.clef-name.lilypond")
	print("constant.numeric.fraction.lilypond")
	print("constant.numeric.time-signature.lilypond")
	print("constant.other.modifier.clef.lilypond")
	print("keyword.control.lilypond")
	print("keyword.operator.duration-scale.lilypond")
	print("meta.element.chord.lilypond")
	print("meta.element.clef.lilypond")
	print("meta.element.key-signature.lilypond")
	print("meta.element.markup.lilypond")
	print("meta.element.note.lilypond")
	print("meta.element.pause.rest.lilypond")
	print("meta.element.pause.skip.lilypond")
	print("meta.element.time-signature.lilypond")
	print("meta.fixme.unknown-clef-name.lilypond")
	print("meta.group.lilypond")
	print("meta.header.lilypond")
	print("meta.music-expression.lilypond")
	print("meta.note-modifier.cautionary-accidental.lilypond")
	print("meta.note-modifier.octave.lilypond")
	print("meta.system.lilypond")
	print("punctuation.definition.chord.lilypond")
	print("punctuation.definition.comment.lilypond")
	print("punctuation.definition.function.lilypond")
	print("punctuation.definition.function.markup")
	print("punctuation.definition.string.lilypond")
	print("punctuation.section.embedded.scheme.lilypond")
	print("punctuation.section.group.begin.lilypond")
	print("punctuation.section.group.end.lilypond")
	print("punctuation.section.system.begin.lilypond")
	print("punctuation.section.system.end.lilypond")
	print("punctuation.separator.key-value.lilypond")
	print("storage.modifier.articulation.accent.lilypond")
	print("storage.modifier.articulation.dynamics.lilypond")
	print("storage.modifier.articulation.named.lilypond")
	print("storage.modifier.beam.lilypond")
	print("storage.modifier.slur.lilypond")
	print("storage.type.breath-mark.lilypond")
	print("storage.type.duration.lilypond")
	print("storage.type.pause.rest.lilypond")
	print("storage.type.pause.skip.lilypond")
	print("storage.type.pitch.lilypond")
	print("storage.type.tie.lilypond")
	print("string.quoted.double.lilypond")
	print("support.constant.header.lilypond")
	print("support.constant.header.mutopia.lilypond")
	print("support.function.element.lilypond")
	print("support.function.element.markup.lilypond")
	print("support.function.general.lilypond")
	print("support.function.section.header.lilypond")
	print("support.function.section.lilypond")
	return ""




def lisp():
	header = "LISP"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.lisp\n")
	print("Lisp")
	print("comment.line.semicolon.lisp")
	print("constant.character.escape.lisp")
	print("constant.character.lisp")
	print("constant.language.lisp")
	print("constant.numeric.lisp")
	print("entity.name.function.lisp")
	print("keyword.control.lisp")
	print("keyword.operator.lisp")
	print("meta.function.lisp")
	print("punctuation.definition.comment.lisp")
	print("punctuation.definition.constant.lisp")
	print("punctuation.definition.string.begin.lisp")
	print("punctuation.definition.string.end.lisp")
	print("punctuation.definition.variable.lisp")
	print("storage.type.function-type.lisp")
	print("string.quoted.double.lisp")
	print("support.function.lisp")
	print("variable.other.global.lisp")
	return ""




def literate_haskell():
	header = "LITERATE_HASKELL"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.tex.latex.haskell\n")
	print("meta.function.embedded.haskell.latex")
	print("punctuation.definition.arguments.begin.latex")
	print("punctuation.definition.arguments.end.latex")
	print("punctuation.definition.function.latex")
	print("support.function.be.latex")
	return ""




def logo():
	header = "LOGO"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.logo\n")
	print("Logo")
	print("comment.line.semicolon.logo")
	print("entity.name.function.logo")
	print("keyword.control.logo")
	print("keyword.other.logo")
	print("punctuation.definition.comment.logo")
	print("punctuation.definition.variable.logo")
	print("string.other.word.logo")
	print("variable.parameter.logo")
	return ""




def logtalk():
	header = "LOGTALK"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.logtalk\n")
	print("Logtalk")
	print("comment.block.logtalk")
	print("comment.line.percentage.logtalk")
	print("constant.character.escape.logtalk")
	print("constant.numeric.logtalk")
	print("entity.name.type.logtalk")
	print("keyword.operator.bitwise.logtalk")
	print("keyword.operator.comparison.arithmetic.logtalk")
	print("keyword.operator.comparison.term.logtalk")
	print("keyword.operator.evaluable.logtalk")
	print("keyword.operator.message-sending.logtalk")
	print("keyword.operator.misc.logtalk")
	print("keyword.operator.mode.logtalk")
	print("punctuation.definition.comment.logtalk")
	print("punctuation.definition.storage.modifier.logtalk")
	print("punctuation.definition.storage.type.logtalk")
	print("punctuation.definition.string.begin.logtalk")
	print("punctuation.definition.string.end.logtalk")
	print("storage.modifier.others.logtalk")
	print("storage.type.closing.logtalk")
	print("storage.type.opening.logtalk")
	print("storage.type.relations.logtalk")
	print("string.quoted.double.logtalk")
	print("string.quoted.single.logtalk")
	print("support.function.all-solutions.logtalk")
	print("support.function.atom-term-processing.logtalk")
	print("support.function.chars-and-bytes-io.logtalk")
	print("support.function.compiling-and-loading.logtalk")
	print("support.function.control.logtalk")
	print("support.function.database.logtalk")
	print("support.function.entity-creation-and-abolishing.logtalk")
	print("support.function.event-handler.logtalk")
	print("support.function.event-handling.logtalk")
	print("support.function.execution-context.logtalk")
	print("support.function.grammar-rule.logtalk")
	print("support.function.implementation-defined-hooks.logtalk")
	print("support.function.logtalk")
	print("support.function.multi-threading.logtalk")
	print("support.function.prolog-flags.logtalk")
	print("support.function.reflection.logtalk")
	print("support.function.stream-selection-and-control.logtalk")
	print("support.function.term-creation-and-decomposition.logtalk")
	print("support.function.term-io.logtalk")
	print("support.function.term-testing.logtalk")
	print("support.function.term-unification.logtalk")
	print("variable.other.logtalk")
	return ""




def lua():
	header = "LUA"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.lua\n")
	print("Lua")
	print("comment.block.lua")
	print("comment.line.double-dash.lua")
	print("constant.character.escape.lua")
	print("constant.language.lua")
	print("constant.numeric.lua")
	print("entity.name.function.lua")
	print("entity.name.function.scope.lua")
	print("keyword.control.lua")
	print("keyword.operator.lua")
	print("meta.function.lua")
	print("punctuation.definition.comment.lua")
	print("punctuation.definition.parameters.begin.lua")
	print("punctuation.definition.parameters.end.lua")
	print("punctuation.definition.string.begin.lua")
	print("punctuation.definition.string.end.lua")
	print("string.quoted.double.lua")
	print("string.quoted.other.multiline.lua")
	print("string.quoted.single.lua")
	print("support.function.library.lua")
	print("support.function.lua")
	print("variable.language.self.lua")
	print("variable.parameter.function.lua")
	return ""




def m():
	header = "M"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.matlab\n")
	print("MATLAB")
	print("comment.line.percentage.matlab")
	print("constant.character.escape.matlab")
	print("constant.language.boolean.matlab")
	print("constant.language.matlab")
	print("invalid.deprecated.function.matlab")
	print("invalid.deprecated.obsolete.function.control.matlab")
	print("keyword.control.matlab")
	print("keyword.operator.logical.matlab")
	print("keyword.other.commands.matlab")
	print("keyword.other.matlab")
	print("meta.scope.expression.matlab")
	print("meta.scope.logical-expression.matlab")
	print("meta.scope.parens.matlab")
	print("punctuation.definition.comment.matlab")
	print("punctuation.definition.string.begin.matlab")
	print("punctuation.definition.string.end.matlab")
	print("punctuation.section.scope.matlab")
	print("storage.modifier.matlab")
	print("string.quoted.double.matlab")
	print("string.quoted.single.matlab")
	print("support.constant.matlab")
	print("support.function.audio.matlab")
	print("support.function.control.base.matlab")
	print("support.function.control.hinf.matlab")
	print("support.function.control.system.matlab")
	print("support.function.control.util.matlab")
	print("support.function.elfun.matlab")
	print("support.function.finance.matlab")
	print("support.function.general.matlab")
	print("support.function.image.matlab")
	print("support.function.io.matlab")
	print("support.function.linear-algebra.matlab")
	print("support.function.mapper.matlab")
	print("support.function.misc.matlab")
	print("support.function.plot.matlab")
	print("support.function.polynomial.matlab")
	print("support.function.quaternion.matlab")
	print("support.function.set.matlab")
	print("support.function.signal.matlab")
	print("support.function.specfun.matlab")
	print("support.function.special-matrix.matlab")
	print("support.function.statistics.base.matlab")
	print("support.function.statistics.distributions.matlab")
	print("support.function.statistics.models.matlab")
	print("support.function.statistics.tests.matlab")
	print("support.function.strings.matlab")
	print("support.function.time.matlab")
	print("support.variable.matlab")
	print("variable.other.transpose.matlab")
	return ""




def macports_portfile():
	header = "MACPORTS_PORTFILE"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.tcl.macports\n")
	print("constant.character.escape.tcl")
	print("entity.name.function.variant.platform.tcl.macports")
	print("entity.name.function.variant.tcl.macports")
	print("invalid.illegal.tcl")
	print("keyword.other.tcl.macports")
	print("keyword.other.variant.platform.tcl.macports")
	print("keyword.other.variant.tcl.macports")
	print("meta.variant.platform.tcl.macports")
	print("meta.variant.tcl.macports")
	print("punctuation.definition.variable.tcl")
	print("punctuation.section.embedded.begin.tcl")
	print("punctuation.section.embedded.end.tcl")
	print("punctuation.section.variant.platform.tcl.macports")
	print("punctuation.section.variant.tcl.macports")
	print("punctuation.terminator.variant.platform.tcl.macports")
	print("punctuation.terminator.variant.tcl.macports")
	print("source.tcl.embedded")
	print("string.quoted.double.tcl")
	print("variable.other.tcl")
	return ""




def mail():
	header = "MAIL"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.mail.markdown\n")
	print("Mail")
	print("comment.line.parentheses.mail")
	print("constant.other.charset.mail")
	print("constant.other.encoding.mail")
	print("constant.other.escape.mail")
	print("constant.other.reference.mail")
	print("keyword.other.mail")
	print("meta.domain-literal.mail")
	print("meta.encoded-text.mail")
	print("meta.group.mail")
	print("meta.header.mail")
	print("meta.separator.signature.mail")
	print("punctuation.definition.comment.mail")
	print("punctuation.definition.constant.mail")
	print("punctuation.definition.string.begin.mail")
	print("punctuation.definition.string.end.mail")
	print("punctuation.separator.key-value.mail")
	print("string.quoted.double.mail")
	print("string.unquoted.atom.mail")
	print("text.html.markdown")
	return ""




def makefile():
	header = "MAKEFILE"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.makefile\n")
	print("Makefile")
	print("comment.line.number-sign.makefile")
	print("entity.name.function.makefile")
	print("keyword.control.makefile")
	print("meta.function.makefile")
	print("punctuation.definition.comment.makefile")
	print("punctuation.separator.continuation.makefile")
	print("string.interpolated.backtick.makefile")
	print("variable.other.makefile")
	return ""




def man():
	header = "MAN"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.man\n")
	print("Man")
	print("markup.heading.man")
	print("markup.underline.link.internal.man")
	print("markup.underline.link.man")
	print("meta.foldingStopMarker.man")
	return ""




def markdown():
	header = "MARKDOWN"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.html.markdown\n")
	print("Markdown")
	print("constant.character.escape.markdown")
	print("constant.other.reference.link.markdown")
	print("invalid.illegal.whitespace.markdown")
	print("markup.bold.markdown")
	print("markup.heading.1.markdown")
	print("markup.heading.2.markdown")
	print("markup.heading.markdown")
	print("markup.italic.markdown")
	print("markup.list.numbered")
	print("markup.list.unnumbered")
	print("markup.quote.markdown")
	print("markup.raw.block.markdown")
	print("markup.raw.inline.markdown")
	print("markup.underline.link.image.markdown")
	print("markup.underline.link.markdown")
	print("meta.block-level.markdown")
	print("meta.disable-markdown")
	print("meta.dummy.line-break")
	print("meta.image.inline.markdown")
	print("meta.image.reference.markdown")
	print("meta.link.email.lt-gt.markdown")
	print("meta.link.inet.markdown")
	print("meta.link.inline.markdown")
	print("meta.link.reference.def.markdown")
	print("meta.link.reference.literal.markdown")
	print("meta.link.reference.markdown")
	print("meta.other.valid-ampersand.markdown")
	print("meta.other.valid-bracket.markdown")
	print("meta.paragraph.list.markdown")
	print("meta.paragraph.markdown")
	print("meta.separator.markdown")
	print("punctuation.definition.blockquote.markdown")
	print("punctuation.definition.bold.markdown")
	print("punctuation.definition.constant.begin.markdown")
	print("punctuation.definition.constant.end.markdown")
	print("punctuation.definition.constant.markdown")
	print("punctuation.definition.heading.markdown")
	print("punctuation.definition.italic.markdown")
	print("punctuation.definition.link.markdown")
	print("punctuation.definition.list_item.markdown")
	print("punctuation.definition.metadata.markdown")
	print("punctuation.definition.raw.markdown")
	print("punctuation.definition.string.begin.markdown")
	print("punctuation.definition.string.end.markdown")
	print("punctuation.definition.string.markdown")
	print("punctuation.separator.key-value.markdown")
	print("string.other.link.description.markdown")
	print("string.other.link.description.title.markdown")
	print("string.other.link.title.markdown")
	return ""




def mediawiki():
	header = "MEDIAWIKI"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.html.mediawiki\n")
	print("Mediawiki")
	print("comment.block.html.mediawiki")
	print("constant.character.entity.html.mediawiki")
	print("constant.numeric.image.width.mediawiki")
	print("constant.other.date-time.mediawiki")
	print("constant.other.namespace.image.mediawiki")
	print("constant.other.namespace.mediawiki")
	print("constant.other.signature.mediawiki")
	print("constant.other.unit.mediawiki")
	print("constant.other.wiki-link.image.mediawiki")
	print("constant.other.wiki-link.mediawiki")
	print("invalid.illegal.bad-ampersand.html.mediawiki")
	print("invalid.illegal.bad-comments-or-CDATA.html.mediawiki")
	print("invalid.illegal.extra-equals-sign.mediawiki")
	print("invalid.illegal.too-many-tildes.mediawiki")
	print("invalid.illegal.whitespace.mediawiki")
	print("keyword.control.image.alignment.mediawiki")
	print("keyword.control.image.formatting.mediawiki")
	print("keyword.control.redirect.mediawiki")
	print("keyword.operator.wiki-link.suppress-image-or-category.mediawiki")
	print("markup.bold.mediawiki")
	print("markup.heading.mediawiki")
	print("markup.italic.mediawiki")
	print("markup.list.mediawiki")
	print("markup.other.table.mediawiki")
	print("markup.other.table.row.mediawiki")
	print("markup.raw.block.mediawiki")
	print("markup.underline.link.external.mediawiki")
	print("meta.function-call.template.mediawiki")
	print("meta.image.wiki.mediawiki")
	print("meta.item.gallery.mediawiki")
	print("meta.link.inline.external.mediawiki")
	print("meta.link.wiki.mediawiki")
	print("meta.paragraph.mediawiki")
	print("meta.redirect.mediawiki")
	print("meta.separator.mediawiki")
	print("meta.tag.inline.any.html.mediawiki")
	print("meta.tag.inline.bold.html.mediawiki")
	print("meta.tag.inline.italic.html.mediawiki")
	print("meta.tag.inline.math.mediawiki")
	print("meta.tag.inline.raw.html.mediawiki")
	print("meta.tag.inline.ref.mediawiki")
	print("meta.tag.inline.strikethrough.html.mediawiki")
	print("meta.tag.inline.underline.html.mediawiki")
	print("meta.template-parameter.mediawiki")
	print("meta.template.mediawiki")
	print("meta.template.parser-function.mediawiki")
	print("punctuation.fix_this_later.brackets.mediawiki")
	print("punctuation.fix_this_later.brackets.mediwiki")
	print("punctuation.fix_this_later.colon.mediawiki")
	print("punctuation.fix_this_later.equals-sign.mediawiki")
	print("punctuation.fix_this_later.pipe.mediawiki")
	print("punctuation.fix_this_later.template.mediawiki")
	print("string.other.title.link.wiki-link.mediawiki")
	print("variable.parameter.template.mediawiki")
	print("variable.parameter.template.named.mediawiki")
	print("variable.parameter.template.numeric.mediawiki")
	return ""




def mel():
	header = "MEL"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.mel\n")
	print("MEL")
	print("comment.block.mel")
	print("comment.line.double-slash.mel")
	print("constant.character.escape.mel")
	print("constant.language.mel")
	print("constant.numeric.mel")
	print("entity.name.function.mel")
	print("keyword.control.mel")
	print("keyword.operator.mel")
	print("keyword.operator.symbolic.mel")
	print("keyword.other.mel")
	print("meta.function.mel")
	print("meta.preprocessor.mel")
	print("punctuation.definition.comment.mel")
	print("punctuation.definition.preprocessor.mel")
	print("punctuation.definition.string.begin.mel")
	print("punctuation.definition.string.end.mel")
	print("punctuation.definition.variable.mel")
	print("punctuation.section.function.mel")
	print("storage.type.mel")
	print("string.quoted.double.mel")
	print("string.quoted.single.mel")
	print("support.constant.mel")
	print("support.function.mel")
	print("variable.other.mel")
	return ""




def mips():
	header = "MIPS"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.mips\n")
	print("comment.line.number-sign.mips")
	print("constant.character.escape.mips")
	print("constant.numeric.float.mips")
	print("constant.numeric.integer.mips")
	print("entity.name.function.label.mips")
	print("meta.function.label.mips")
	print("punctuation.definition.comment.mips")
	print("punctuation.definition.string.begin.mips")
	print("punctuation.definition.string.end.mips")
	print("punctuation.definition.variable.mips")
	print("storage.modifier.mips")
	print("storage.type.mips")
	print("string.quoted.double.mips")
	print("support.function.mips")
	print("support.function.pseudo.mips")
	print("variable.other.register.reserved.mips")
	print("variable.other.register.usable.by-name.mips")
	print("variable.other.register.usable.by-number.mips")
	print("variable.other.register.usable.floating-point.mips")
	return ""




def mod_perl():
	header = "MOD_PERL"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.apache-config.mod_perl\n")
	print("comment.block.documentation.apache-config.mod_perl")
	print("entity.name.tag.apache-config")
	print("meta.perl-section.apache-config.mod_perl")
	print("meta.tag.apache-config")
	print("mod_perl")
	print("punctuation.definition.comment.mod_perl")
	print("punctuation.definition.tag.apache-config")
	print("support.constant.apache-config.mod_perl")
	print("support.constant.apache-config.mod_perl_1.mod_perl")
	return ""




def modula_3():
	header = "MODULA-3"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.modula-3\n")
	print("Modula-3")
	print("comment.block.modula-3")
	print("constant.character.escape.modula-3")
	print("constant.language.modula-3")
	print("constant.numeric.modula-3")
	print("keyword.other.modula-3")
	print("punctuation.definition.comment.modula-3")
	print("punctuation.definition.string.begin.modula-3")
	print("punctuation.definition.string.end.modula-3")
	print("storage.type.modula-3")
	print("string.quoted.double.modula-3")
	print("string.quoted.single.modula-3")
	return ""




def moinmoin():
	header = "MOINMOIN"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.moinmoin\n")
	print("MoinMoin")
	print("comment.line.double-number-sign.moimoin")
	print("markup.heading.1.moinmoin")
	print("markup.heading.2.moinmoin")
	print("markup.heading.3.moinmoin")
	print("markup.heading.4.moinmoin")
	print("markup.heading.5.moinmoin")
	print("markup.list.definition.term.moinmoin")
	print("markup.list.numbered.moinmoin")
	print("markup.list.unnumbered.moinmoin")
	print("markup.raw.block.moinmoin")
	print("markup.raw.inline.moinmoin")
	print("markup.underline.link.moinmoin")
	print("meta.macro.moinmoin")
	print("meta.paragraph.moinmoin")
	print("meta.pragma.moimoin")
	print("meta.separator.moinmoin")
	print("meta.table.column.moinmoin")
	print("punctuation.definition.bold.moinmoin")
	print("punctuation.definition.comment.moimoin")
	print("punctuation.definition.heading.moimoin")
	print("punctuation.definition.italic.moinmoin")
	print("punctuation.definition.link.moinmoin")
	print("punctuation.definition.list_item.moinmoin")
	print("punctuation.definition.macro.moinmoin")
	print("punctuation.definition.raw.moinmoin")
	print("punctuation.definition.table.column.moinmoin")
	print("punctuation.definition.underline.moinmoin")
	print("punctuation.separator.definition.moinmoin")
	print("punctuation.separator.key-value.moinmoin")
	return ""




def mootools():
	header = "MOOTOOLS"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.js.mootools\n")
	print("MooTools")
	print("entity.name.type.instance.fx.style.js.mootools")
	print("entity.name.type.instance.js.mootools")
	print("keyword.operator.new.js")
	print("meta.even-tab.group10.spaces")
	print("meta.even-tab.group10.tab")
	print("meta.even-tab.group2.spaces")
	print("meta.even-tab.group2.tab")
	print("meta.even-tab.group4.spaces")
	print("meta.even-tab.group4.tab")
	print("meta.even-tab.group6.spaces")
	print("meta.even-tab.group6.tab")
	print("meta.even-tab.group8.spaces")
	print("meta.even-tab.group8.tab")
	print("meta.function.array.js.mootools")
	print("meta.function.dom.js.mootools")
	print("meta.function.element.js.mootools")
	print("meta.function.hash.js.mootools")
	print("meta.leading-tabs")
	print("meta.odd-tab.group1.spaces")
	print("meta.odd-tab.group1.tab")
	print("meta.odd-tab.group11.spaces")
	print("meta.odd-tab.group11.tab")
	print("meta.odd-tab.group3.spaces")
	print("meta.odd-tab.group3.tab")
	print("meta.odd-tab.group5.spaces")
	print("meta.odd-tab.group5.tab")
	print("meta.odd-tab.group7.spaces")
	print("meta.odd-tab.group7.tab")
	print("meta.odd-tab.group9.spaces")
	print("meta.odd-tab.group9.tab")
	print("punctuation.definition.parameters.begin.js")
	print("punctuation.definition.parameters.end.js")
	print("punctuation.separator.key-value.js.mootools")
	print("support.class.ajax.js.mootools")
	print("support.class.array.js.mootools")
	print("support.class.base.fx.js.mootools")
	print("support.class.base.window.js.mootools")
	print("support.class.class.js.mootools")
	print("support.class.color.js.mootools")
	print("support.class.cookie.js.mootools")
	print("support.class.dom.js.mootools")
	print("support.class.element.js")
	print("support.class.element.js.mootools")
	print("support.class.elements.fx.js.mootools")
	print("support.class.event.js.mootools")
	print("support.class.function.js.mootools")
	print("support.class.fx.utils.js.mootools")
	print("support.class.hash.js.mootools")
	print("support.class.js.mootools")
	print("support.class.json.js.mootools")
	print("support.class.keys.fx.options.js.mootools")
	print("support.class.keys.fx.slide.options.js.mootools")
	print("support.class.keys.options.transitions.fx")
	print("support.class.number.js.mootools")
	print("support.class.scroll.fx.js.mootools")
	print("support.class.size.window.js.mootools")
	print("support.class.slide.fx.js.mootools")
	print("support.class.string.js.mootools")
	print("support.class.styles.fx.js.mootools")
	print("support.class.transitions.fx.js.mootools")
	print("support.class.window.browser.js.mootools")
	print("support.class.xhr.js.mootools")
	print("support.function.array.js.mootools")
	print("support.function.asset.js.mootools")
	print("support.function.chain.js.mootools")
	print("support.function.class.js.mootools")
	print("support.function.color.js.mootools")
	print("support.function.dom.js.mootools")
	print("support.function.element.js.mootools")
	print("support.function.events.js.mootools")
	print("support.function.hash.js.mootools")
	print("support.function.js.mootools")
	print("support.function.options.js.mootools")
	print("support.function.utility.js.mootools")
	print("variable.parameter.function.js")
	return ""




def movable_type():
	header = "MOVABLE_TYPE"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.html.mt\n")
	print("comment.line.double-slash.ruby")
	print("comment.line.number-sign.ruby")
	print("constant.character.entity.html")
	print("entity.name.tag.mt")
	print("entity.other.attribute-name.html")
	print("invalid.illegal.bad-ampersand.html")
	print("meta.tag.mt.container.html")
	print("meta.tag.mt.variable.html")
	print("punctuation.definition.comment.php")
	print("punctuation.definition.comment.ruby")
	print("punctuation.definition.constant.html")
	print("punctuation.definition.string.begin.html")
	print("punctuation.definition.string.end.html")
	print("punctuation.definition.tag.mt")
	print("punctuation.section.embedded.php")
	print("punctuation.section.embedded.ruby")
	print("punctuation.section.embedded.smarty")
	print("source.php.embedded.html")
	print("source.ruby.embedded.html")
	print("source.smarty.embedded.html")
	print("source.smarty.embedded.xhtml")
	print("string.quoted.double.html")
	print("string.quoted.single.html")
	print("variable.other.mt")
	return ""




def multimarkdown():
	header = "MULTIMARKDOWN"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.html.markdown.multimarkdown\n")
	print("MultiMarkdown")
	print("keyword.other.multimarkdown")
	print("meta.content.multimarkdown")
	print("meta.header.multimarkdown")
	print("punctuation.separator.key-value.multimarkdown")
	print("string.unquoted.multimarkdown")
	return ""


def nemerle():
	header = "NEMERLE"
	print("{} \n{}".format(header, "="*len(header)))
	print("comment.block.nemerle")
	print("comment.line.double-slash.nemerle")
	print("constant.character.escape")
	print("constant.character.escape.nemerle")
	print("constant.language.nemerle")
	print("constant.numeric.nemerle")
	print("keyword.control.nemerle")
	print("keyword.operator.nemerle")
	print("keyword.other.nemerle")
	print("punctuation.definition.comment.nemerle")
	print("punctuation.definition.string.begin.nemerle")
	print("punctuation.definition.string.end.nemerle")
	print("storage.modifier.nemerle")
	print("storage.type.nemerle")
	print("string.interpolated.nemerle")
	print("string.quoted.double.nemerle")
	print("string.quoted.single.nemerle")
	print("variable.language.nemerle")

def objective_cpp():
	header = "OBJECTIVE-C++"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.objc++\n")
	print("Objective-C++")
	return ""




def objective_c():
	header = "OBJECTIVE-C"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.objc\n")
	print("Objective-C")
	print("comment.block.objc")
	print("comment.line.double-slash.c++")
	print("constant.character.escape.objc")
	print("constant.language.objc")
	print("entity.name.function.name-of-parameter.objc")
	print("entity.name.function.objc")
	print("entity.name.type.objc")
	print("entity.other.inherited-class.objc")
	print("invalid.illegal.unknown-escape.objc")
	print("keyword.control.exception.objc")
	print("keyword.control.macro.objc")
	print("keyword.control.synchronize.objc")
	print("keyword.other.objc")
	print("meta.argument-type.objc")
	print("meta.bracketed.objc")
	print("meta.divider.objc")
	print("meta.function-call.objc")
	print("meta.function.objc")
	print("meta.id-type.objc")
	print("meta.id-with-protocol.objc")
	print("meta.implementation.objc")
	print("meta.inherited-class.objc")
	print("meta.interface-or-protocol.objc")
	print("meta.protocol-list.objc")
	print("meta.return-type.objc")
	print("punctuation.definition.comment.objc")
	print("punctuation.definition.entity.other.inherited-class.objc")
	print("punctuation.definition.keyword.objc")
	print("punctuation.definition.storage.modifier.objc")
	print("punctuation.definition.storage.type.objc")
	print("punctuation.definition.string.begin.objc")
	print("punctuation.definition.string.end.objc")
	print("punctuation.definition.type.objc")
	print("punctuation.section.scope.begin.objc")
	print("punctuation.section.scope.end.objc")
	print("punctuation.section.scope.objc")
	print("punctuation.separator.arguments.objc")
	print("punctuation.separator.continuation.c++")
	print("storage.modifier.objc")
	print("storage.modifier.protocol.objc")
	print("storage.type.objc")
	print("string.quoted.double.objc")
	print("support.class.cocoa")
	print("support.constant.cocoa")
	print("support.constant.notification.cocoa")
	print("support.function.any-method.name-of-parameter.objc")
	print("support.function.any-method.objc")
	print("support.function.cocoa")
	print("support.other.protocol.objc")
	print("support.type.cocoa")
	print("support.variable.foundation")
	print("variable.language.objc")
	print("variable.other.selector.objc")
	print("variable.parameter.function.objc")
	return ""




def ocaml():
	header = "OCAML"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.ocaml\n")
	print("OCaml")
	print("comment.block.empty.ocaml")
	print("comment.block.ocaml")
	print("comment.block.ocamlyacc")
	print("comment.block.string.constant.character.escape.ocaml")
	print("comment.block.string.quoted.double.ocaml")
	print("constant.character.ocaml")
	print("constant.character.regexp.escape.ocaml")
	print("constant.character.string.escape.ocaml")
	print("constant.language.boolean.ocaml")
	print("constant.language.pseudo-variable.ocaml")
	print("constant.language.universal-match.ocaml")
	print("constant.numeric.floating-point.ocaml")
	print("constant.numeric.integer.int32.ocaml")
	print("constant.numeric.integer.int64.ocaml")
	print("constant.numeric.integer.nativeint.ocaml")
	print("constant.numeric.integer.ocaml")
	print("entity.name.function.method.ocaml")
	print("entity.name.function.ocaml")
	print("entity.name.tag.label.ocaml")
	print("entity.name.tag.label.optional.ocaml")
	print("entity.name.tag.record.ocaml")
	print("entity.name.type.class-type.ocaml")
	print("entity.name.type.class.ocaml")
	print("entity.name.type.exception.ocaml")
	print("entity.name.type.external-signature.ocaml")
	print("entity.name.type.module-type.ocaml")
	print("entity.name.type.module.ocaml")
	print("entity.name.type.self-binding.ocaml")
	print("entity.name.type.value-signature.ocaml")
	print("entity.name.type.variant.ocaml")
	print("entity.name.type.variant.polymorphic.ocaml")
	print("invalid.illegal.character.string.escape")
	print("invalid.illegal.unrecognized-character.ocaml")
	print("keyword.control.begin-end.ocaml")
	print("keyword.control.for-loop.ocaml")
	print("keyword.control.loop.ocaml")
	print("keyword.control.match-condition.ocaml")
	print("keyword.control.match-definition.ocaml")
	print("keyword.control.object.ocaml")
	print("keyword.control.ocaml")
	print("keyword.control.while-loop.ocaml")
	print("keyword.operator.infix.floating-point.ocaml")
	print("keyword.operator.infix.ocaml")
	print("keyword.operator.ocaml")
	print("keyword.operator.prefix.floating-point.ocaml")
	print("keyword.operator.prefix.ocaml")
	print("keyword.operator.symbol.ocaml")
	print("keyword.other.class-definition.ocaml")
	print("keyword.other.class-type-definition.ocaml")
	print("keyword.other.directive.line-number.ocaml")
	print("keyword.other.directive.ocaml")
	print("keyword.other.function-definition.ocaml")
	print("keyword.other.funtion-definition.ocaml")
	print("keyword.other.language.ocaml")
	print("keyword.other.method-definition.ocaml")
	print("keyword.other.method-restriction.ocaml")
	print("keyword.other.module-binding.ocaml")
	print("keyword.other.module-definition.ocaml")
	print("keyword.other.module-type-definition.ocaml")
	print("keyword.other.module.signature.ocaml")
	print("keyword.other.module.structure.ocaml")
	print("keyword.other.object-definition.ocaml")
	print("keyword.other.ocaml")
	print("keyword.other.storage.modifier.ocaml")
	print("keyword.other.type-definition.ocaml")
	print("meta.array.ocaml")
	print("meta.begin-end-group.ocaml")
	print("meta.class.ocaml")
	print("meta.class.type-definition.ocaml")
	print("meta.class.virtual.ocaml")
	print("meta.class.virtual.type-definition.ocaml")
	print("meta.empty-typing-pair.ocaml")
	print("meta.empty-typing-pair.parens.ocaml")
	print("meta.exception.ocaml")
	print("meta.for-loop.ocaml")
	print("meta.function.anonymous.definition.ocaml")
	print("meta.function.anonymous.ocaml")
	print("meta.function.ocaml")
	print("meta.list.ocaml")
	print("meta.match-option.ocaml")
	print("meta.method-call.ocaml")
	print("meta.method.ocaml")
	print("meta.module-reference.ocaml")
	print("meta.module.binding")
	print("meta.module.ocaml")
	print("meta.module.open.ocaml")
	print("meta.module.signature.external.ocaml")
	print("meta.module.signature.ocaml")
	print("meta.module.signature.val.ocaml")
	print("meta.module.structure.ocaml")
	print("meta.module.type.ocaml")
	print("meta.object.ocaml")
	print("meta.object.type-constraint.ocaml")
	print("meta.parameter.type-constrained.ocaml")
	print("meta.paren-group.ocaml")
	print("meta.paren.group")
	print("meta.pattern-match.ocaml")
	print("meta.polymorphic-variant.definition.ocaml")
	print("meta.record.definition.ocaml")
	print("meta.record.ocaml")
	print("meta.recordfield.match.ocaml")
	print("meta.type-constraint.ocaml")
	print("meta.type-definition-group.ocaml")
	print("meta.type-definition.ocaml")
	print("meta.while-loop.ocaml")
	print("punctuation.definition.array.begin.ocaml")
	print("punctuation.definition.array.end.ocaml")
	print("punctuation.definition.camlp4-stream.ocaml")
	print("punctuation.definition.function.anonymous.ocaml")
	print("punctuation.definition.labeled-parameter.ocaml")
	print("punctuation.definition.list.begin.ocaml")
	print("punctuation.definition.list.constructor.ocaml")
	print("punctuation.definition.list.end.ocaml")
	print("punctuation.definition.match-option.ocaml")
	print("punctuation.definition.optional-parameter.ocaml")
	print("punctuation.definition.polymorphic-variant.ocaml")
	print("punctuation.definition.record.ocaml")
	print("punctuation.definition.self-binding.ocaml")
	print("punctuation.definition.string.begin.ocaml")
	print("punctuation.definition.string.end.ocaml")
	print("punctuation.definition.tuple.ocaml")
	print("punctuation.section.type-constraint.ocaml")
	print("punctuation.separator.algebraic-type.ocaml")
	print("punctuation.separator.argument-label.ocaml")
	print("punctuation.separator.function-definition.ocaml")
	print("punctuation.separator.function-return.ocaml")
	print("punctuation.separator.function.type-constraint.ocaml")
	print("punctuation.separator.label.ocaml")
	print("punctuation.separator.match-definition.ocaml")
	print("punctuation.separator.match-option.ocaml")
	print("punctuation.separator.match-pattern.ocaml")
	print("punctuation.separator.method-call.ocaml")
	print("punctuation.separator.module-binding.ocmal")
	print("punctuation.separator.module-definition.ocaml")
	print("punctuation.separator.module-reference.ocaml")
	print("punctuation.separator.ocaml")
	print("punctuation.separator.optional-parameter-assignment.ocaml")
	print("punctuation.separator.optional-parameter.ocaml")
	print("punctuation.separator.record.field-assignment.ocaml")
	print("punctuation.separator.record.ocaml")
	print("punctuation.separator.string.ignore-eol.ocaml")
	print("punctuation.separator.tuple.ocaml")
	print("punctuation.separator.type-constraint.ocaml")
	print("punctuation.separator.type-definition.ocaml")
	print("punctuation.separator.variant-definition.ocaml")
	print("punctuation.terminator.expression.ocaml")
	print("source.camlp4.embedded.ocaml")
	print("source.ocaml")
	print("storage.type.module.ocaml")
	print("storage.type.ocaml")
	print("storage.type.polymorphic-variant.ocaml")
	print("storage.type.user-defined.ocaml")
	print("storage.type.variant.polymorphic.ocaml")
	print("string.quoted.double.ocaml")
	print("support.other.module.ocaml")
	print("variable.parameter.labeled.ocaml")
	print("variable.parameter.ocaml")
	print("variable.parameter.optional.ocaml")
	print("variable.parameter.record.ocaml")
	print("variable.parameter.tuple.ocaml")
	print("variable.parameter.unit.ocaml")
	return ""




def ocamllex():
	header = "OCAMLLEX"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.ocamllex\n")
	print("OCamllex")
	print("comment.block.empty.ocaml")
	print("comment.block.ocaml")
	print("comment.block.string.constant.character.escape.ocaml")
	print("comment.block.string.quoted.double.ocaml")
	print("constant.character.ocamllex")
	print("constant.character.regexp.escape.ocaml")
	print("constant.character.string.escape.ocaml")
	print("constant.language.eof.ocamllex")
	print("constant.language.universal-match.ocamllex")
	print("entity.name.function.entrypoint.ocamllex")
	print("entity.name.type.pattern.reference.stupid-goddamn-hack.ocamllex")
	print("entity.name.type.pattern.stupid-goddamn-hack.ocamllex")
	print("invalid.illegal.character.string.escape")
	print("invalid.illegal.unrecognized-character.ocamllex")
	print("keyword.operator.ocamllex")
	print("keyword.operator.pattern.alternation.ocamllex")
	print("keyword.operator.pattern.modifier.ocamllex")
	print("keyword.operator.symbol.ocamllex")
	print("keyword.other.entry-definition.ocamllex")
	print("keyword.other.ocamllex")
	print("keyword.other.pattern-definition.ocamllex")
	print("keyword.other.pattern.ocamllex")
	print("meta.action.ocamllex")
	print("meta.embedded.ocaml")
	print("meta.paren-group.ocamllex")
	print("meta.pattern-definition.ocaml")
	print("meta.pattern-match.ocaml")
	print("meta.pattern.character-class.ocamllex")
	print("meta.pattern.sub-pattern.ocamllex")
	print("punctuation.definition.action.begin.ocamllex")
	print("punctuation.definition.action.end.ocamllex")
	print("punctuation.definition.char.begin.ocamllex")
	print("punctuation.definition.char.end.ocamllex")
	print("punctuation.definition.character-class.begin.ocamllex")
	print("punctuation.definition.character-class.end.ocamllex")
	print("punctuation.definition.character-class.negation.ocamllex")
	print("punctuation.definition.string.begin.ocaml")
	print("punctuation.definition.string.end.ocaml")
	print("punctuation.definition.sub-pattern.begin.ocamllex")
	print("punctuation.definition.sub-pattern.end.ocamllex")
	print("punctuation.section.embedded.ocaml.begin.ocamllex")
	print("punctuation.section.embedded.ocaml.end.ocamllex")
	print("punctuation.separator.character-class.range.ocamllex")
	print("punctuation.separator.match-pattern.ocamllex")
	print("punctuation.separator.string.ignore-eol.ocaml")
	print("string.quoted.double.ocamllex")
	return ""




def ocamlyacc():
	header = "OCAMLYACC"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.ocamlyacc\n")
	print("OCamlyacc")
	print("comment.block.ocamlyacc")
	print("comment.block.string.constant.character.escape.ocamlyacc")
	print("comment.block.string.quoted.double.ocamlyacc")
	print("entity.name.function.non-terminal.ocamlyacc")
	print("entity.name.function.non-terminal.reference.ocamlyacc")
	print("entity.name.type.token.ocamlyacc")
	print("entity.name.type.token.reference.ocamlyacc")
	print("invalid.illegal.unrecognized-character.ocaml")
	print("keyword.other.decorator.precedence.ocamlyacc")
	print("keyword.other.decorator.start-symbol.ocamlyacc")
	print("keyword.other.decorator.symbol-type.ocamlyacc")
	print("keyword.other.decorator.token.associativity.ocamlyacc")
	print("keyword.other.decorator.token.ocamlyacc")
	print("keyword.other.precedence.ocamlyacc")
	print("keyword.other.start-symbol.ocamlyacc")
	print("keyword.other.symbol-type.ocamlyacc")
	print("keyword.other.token.associativity.ocamlyacc")
	print("keyword.other.token.ocamlyacc")
	print("meta.action.semantic.ocamlyacc")
	print("meta.declarations.ocamlyacc")
	print("meta.header.ocamlyacc")
	print("meta.non-terminal.ocamlyacc")
	print("meta.precidence.declaration")
	print("meta.rule-match.ocaml")
	print("meta.rules.ocamlyacc")
	print("meta.start-symbol.ocamlyacc")
	print("meta.symbol-type.ocamlyacc")
	print("meta.token.associativity.ocamlyacc")
	print("meta.token.declaration.ocamlyacc")
	print("meta.token.type-declaration.ocamlyacc")
	print("punctuation.definition.action.semantic.ocamlyacc")
	print("punctuation.definition.type-declaration.begin.ocamlyacc")
	print("punctuation.definition.type-declaration.end.ocamlyacc")
	print("punctuation.section.header.begin.ocamlyacc")
	print("punctuation.section.header.end.ocamlyacc")
	print("punctuation.section.rules.begin.ocamlyacc")
	print("punctuation.section.rules.end.ocamlyacc")
	print("punctuation.separator.rule.ocamlyacc")
	return ""




def opengl():
	header = "OPENGL"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.open-gl\n")
	print("OpenGL")
	print("meta.open-gl")
	print("support.constant.open-gl")
	print("support.function.open-gl")
	print("support.type.open-gl")
	return ""




def pascal():
	header = "PASCAL"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.pascal\n")
	print("Pascal")
	print("comment.block.pascal.one")
	print("comment.block.pascal.two")
	print("comment.line.double-dash.pascal.one")
	print("comment.line.double-slash.pascal.two")
	print("constant.character.escape.apostrophe.pascal")
	print("constant.character.escape.pascal")
	print("constant.numeric.pascal")
	print("entity.name.function.pascal")
	print("entity.name.function.prototype.pascal")
	print("keyword.control.pascal")
	print("meta.function.pascal")
	print("meta.function.prototype.pascal")
	print("punctuation.definition.comment.pascal")
	print("punctuation.definition.string.begin.pascal")
	print("punctuation.definition.string.end.pascal")
	print("storage.type.function.pascal")
	print("storage.type.prototype.pascal")
	print("string.quoted.double.pascal")
	print("string.quoted.single.pascal")
	return ""




def perl():
	header = "PERL"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.perl\n")
	print("Perl")
	print("comment.block.documentation.perl")
	print("comment.line.number-sign.perl")
	print("constant.character.escape.perl")
	print("constant.character.escape.perl.perl")
	print("constant.language.perl")
	print("constant.other.bareword.perl")
	print("constant.other.key.perl")
	print("entity.name.function.format.perl")
	print("entity.name.function.perl")
	print("entity.name.type.class.perl")
	print("keyword.control.perl")
	print("keyword.control.regexp-option.perl")
	print("keyword.operator.comparison.perl")
	print("keyword.operator.filetest.perl")
	print("keyword.operator.logical.perl")
	print("meta.class.perl")
	print("meta.comment.full-line.perl")
	print("meta.even-tab")
	print("meta.format.perl")
	print("meta.function.perl")
	print("meta.leading-tabs")
	print("meta.odd-tab")
	print("punctuation.definition.comment.perl")
	print("punctuation.definition.heredoc.perl")
	print("punctuation.definition.parameters.perl")
	print("punctuation.definition.string.begin.perl")
	print("punctuation.definition.string.end.perl")
	print("punctuation.definition.string.perl")
	print("punctuation.definition.variable.perl")
	print("punctuation.section.scope.perl")
	print("storage.modifier.perl")
	print("storage.type.method.perl")
	print("storage.type.sub.perl")
	print("string.interpolated.perl")
	print("string.interpolated.qx-brace.perl")
	print("string.interpolated.qx-bracket.perl")
	print("string.interpolated.qx-ltgt.perl")
	print("string.interpolated.qx-paren.perl")
	print("string.interpolated.qx.perl")
	print("string.interpolated.qx.single-quote.perl")
	print("string.quoted.double.perl")
	print("string.quoted.other.q-brace.perl")
	print("string.quoted.other.q-bracket.perl")
	print("string.quoted.other.q-ltgt.perl")
	print("string.quoted.other.q-paren.perl")
	print("string.quoted.other.q.perl")
	print("string.quoted.other.qq-brace.perl")
	print("string.quoted.other.qq-bracket.perl")
	print("string.quoted.other.qq-ltgt.perl")
	print("string.quoted.other.qq-paren.perl")
	print("string.quoted.other.qq.perl")
	print("string.quoted.single.perl")
	print("string.regexp.compile.nested_braces.perl")
	print("string.regexp.compile.nested_brackets.perl")
	print("string.regexp.compile.nested_ltgt.perl")
	print("string.regexp.compile.nested_parens.perl")
	print("string.regexp.compile.perl")
	print("string.regexp.compile.simple-delimiter.perl")
	print("string.regexp.compile.single-quote.perl")
	print("string.regexp.find-m-brace.perl")
	print("string.regexp.find-m-bracket.perl")
	print("string.regexp.find-m-ltgt.perl")
	print("string.regexp.find-m-paren.perl")
	print("string.regexp.find-m.perl")
	print("string.regexp.find.extended.perl")
	print("string.regexp.find.perl")
	print("string.regexp.format.nested_braces.perl")
	print("string.regexp.format.nested_brackets.perl")
	print("string.regexp.format.nested_ltgt.perl")
	print("string.regexp.format.nested_parens.perl")
	print("string.regexp.format.simple_delimiter.perl")
	print("string.regexp.format.single_quote.perl")
	print("string.regexp.nested_braces.perl")
	print("string.regexp.nested_brackets.perl")
	print("string.regexp.nested_ltgt.perl")
	print("string.regexp.nested_parens.perl")
	print("string.regexp.replace.extended.simple_delimiter.perl")
	print("string.regexp.replace.perl")
	print("string.regexp.replaceXXX.format.simple_delimiter.perl")
	print("string.regexp.replaceXXX.format.single_quote.perl")
	print("string.regexp.replaceXXX.simple_delimiter.perl")
	print("string.unquoted.heredoc.backtick.perl")
	print("string.unquoted.heredoc.doublequote.perl")
	print("string.unquoted.heredoc.perl")
	print("string.unquoted.heredoc.quote.perl")
	print("string.unquoted.program-block.perl")
	print("support.function.perl")
	print("variable.other.predefined.perl")
	print("variable.other.predefined.program-name.perl")
	print("variable.other.readwrite.global.perl")
	print("variable.other.readwrite.global.special.perl")
	print("variable.other.readwrite.list-separator.perl")
	print("variable.other.regexp.last-paren-match.perl")
	print("variable.other.regexp.match.perl")
	print("variable.other.regexp.post-match.perl")
	print("variable.other.regexp.pre-match.perl")
	print("variable.other.subpattern.perl")
	print("variable.parameter.function.perl")
	return ""




def php():
	header = "PHP"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.php\n")
	print("PHP")
	print("comment.block.documentation.phpdoc.php")
	print("comment.block.php")
	print("comment.line.double-dash.sql")
	print("comment.line.double-slash.php")
	print("comment.line.number-sign.php")
	print("comment.line.number-sign.sql")
	print("constant.character.escape.php")
	print("constant.character.escape.regex.php")
	print("constant.language.php")
	print("constant.numeric.hex.php")
	print("constant.numeric.index.php")
	print("constant.numeric.octal.php")
	print("constant.numeric.php")
	print("constant.other.class.php")
	print("constant.other.php")
	print("entity.name.function.php")
	print("entity.name.type.class.php")
	print("entity.name.type.interface.php")
	print("entity.other.inherited-class.php")
	print("invalid.illegal.invalid-simple-array-index.php")
	print("invalid.illegal.missing-asterisk.phpdoc.php")
	print("invalid.illegal.non-null-typehinted.php")
	print("invalid.illegal.php")
	print("invalid.illegal.wrong-access-type.phpdoc.php")
	print("keyword.control.exception.php")
	print("keyword.control.import.include.php")
	print("keyword.control.php")
	print("keyword.operator.arithmetic.php")
	print("keyword.operator.assignment.php")
	print("keyword.operator.bitwise.php")
	print("keyword.operator.class.php")
	print("keyword.operator.comparison.php")
	print("keyword.operator.error-control.php")
	print("keyword.operator.heredoc.php")
	print("keyword.operator.increment-decrement.php")
	print("keyword.operator.index-end.php")
	print("keyword.operator.index-start.php")
	print("keyword.operator.key.php")
	print("keyword.operator.logical.php")
	print("keyword.operator.php")
	print("keyword.operator.regexp.php")
	print("keyword.operator.string.php")
	print("keyword.operator.type.php")
	print("keyword.other.new.php")
	print("keyword.other.phpdoc.php")
	print("markup.underline.link.php")
	print("meta.array.php")
	print("meta.class.php")
	print("meta.consecutive-tags.php")
	print("meta.embedded.html")
	print("meta.embedded.sql")
	print("meta.embedded.xml")
	print("meta.function-call.object.php")
	print("meta.function-call.php")
	print("meta.function-call.static.php")
	print("meta.function.argument.array.php")
	print("meta.function.argument.default.php")
	print("meta.function.argument.no-default.php")
	print("meta.function.argument.typehinted.php")
	print("meta.function.php")
	print("meta.include.php")
	print("meta.interface.php")
	print("meta.tag.inline.phpdoc.php")
	print("punctuation.definition.arbitrary-repitition.php")
	print("punctuation.definition.array.begin.php")
	print("punctuation.definition.array.end.php")
	print("punctuation.definition.character-class.php")
	print("punctuation.definition.comment.php")
	print("punctuation.definition.parameters.begin.php")
	print("punctuation.definition.parameters.end.php")
	print("punctuation.definition.string.begin.php")
	print("punctuation.definition.string.end.php")
	print("punctuation.definition.string.php")
	print("punctuation.definition.variable.php")
	print("punctuation.section.embedded.begin.php")
	print("punctuation.section.embedded.end.php")
	print("punctuation.terminator.expression.php")
	print("punctuation.whitespace.embedded.leading.php")
	print("punctuation.whitespace.embedded.trailing.php")
	print("source.php")
	print("source.php.embedded.block.html")
	print("source.php.embedded.line.empty.html")
	print("source.php.embedded.line.html")
	print("storage.modifier.abstract.php")
	print("storage.modifier.extends.php")
	print("storage.modifier.implements.php")
	print("storage.modifier.php")
	print("storage.modifier.reference.php")
	print("storage.type.class.php")
	print("storage.type.function.php")
	print("storage.type.interface.php")
	print("storage.type.php")
	print("string.interpolated.php")
	print("string.quoted.double.php")
	print("string.quoted.double.sql")
	print("string.quoted.double.sql.php")
	print("string.quoted.double.unclosed.sql")
	print("string.quoted.other.backtick.sql")
	print("string.quoted.other.backtick.unclosed.sql")
	print("string.quoted.single.php")
	print("string.quoted.single.sql")
	print("string.quoted.single.sql.php")
	print("string.quoted.single.unclosed.sql")
	print("string.regexp.arbitrary-repitition.php")
	print("string.regexp.character-class.php")
	print("string.regexp.double-quoted.php")
	print("string.regexp.single-quoted.php")
	print("string.unquoted.heredoc.php")
	print("string.unquoted.index.php")
	print("support.class.builtin.php")
	print("support.class.implements.php")
	print("support.class.php")
	print("support.constant.core.php")
	print("support.constant.std.php")
	print("support.function.alias.php")
	print("support.function.array.php")
	print("support.function.assert.php")
	print("support.function.attr.php")
	print("support.function.base64.php")
	print("support.function.basic_functions.php")
	print("support.function.bcmath.php")
	print("support.function.birdstep.php")
	print("support.function.browscap.php")
	print("support.function.builtin_functions.php")
	print("support.function.bz2.php")
	print("support.function.cal_unix.php")
	print("support.function.calendar.php")
	print("support.function.characterdata.php")
	print("support.function.com_com.php")
	print("support.function.com_variant.php")
	print("support.function.construct.php")
	print("support.function.crc32.php")
	print("support.function.crypt.php")
	print("support.function.ctype.php")
	print("support.function.cyr_convert.php")
	print("support.function.datetime.php")
	print("support.function.dba.php")
	print("support.function.dbase.php")
	print("support.function.dir.php")
	print("support.function.dl.php")
	print("support.function.dns.php")
	print("support.function.document.php")
	print("support.function.domconfiguration.php")
	print("support.function.domerrorhandler.php")
	print("support.function.domimplementation.php")
	print("support.function.domimplementationlist.php")
	print("support.function.domimplementationsource.php")
	print("support.function.domstringlist.php")
	print("support.function.easter.php")
	print("support.function.element.php")
	print("support.function.exec.php")
	print("support.function.exif.php")
	print("support.function.fdf.php")
	print("support.function.file.php")
	print("support.function.filestat.php")
	print("support.function.filter.php")
	print("support.function.formatted_print.php")
	print("support.function.fsock.php")
	print("support.function.ftok.php")
	print("support.function.gd.php")
	print("support.function.gettext.php")
	print("support.function.gmp.php")
	print("support.function.hash.php")
	print("support.function.hash_md.php")
	print("support.function.hash_sha.php")
	print("support.function.head.php")
	print("support.function.html.php")
	print("support.function.http.php")
	print("support.function.ibase_blobs.php")
	print("support.function.ibase_events.php")
	print("support.function.ibase_query.php")
	print("support.function.ibase_service.php")
	print("support.function.iconv.php")
	print("support.function.image.php")
	print("support.function.info.php")
	print("support.function.interbase.php")
	print("support.function.interface.php")
	print("support.function.iptc.php")
	print("support.function.json.php")
	print("support.function.lcg.php")
	print("support.function.ldap.php")
	print("support.function.levenshtein.php")
	print("support.function.libxml.php")
	print("support.function.link.php")
	print("support.function.magic.php")
	print("support.function.mail.php")
	print("support.function.main.php")
	print("support.function.math.php")
	print("support.function.mbstring.php")
	print("support.function.mcrypt.php")
	print("support.function.md5.php")
	print("support.function.metaphone.php")
	print("support.function.mhash.php")
	print("support.function.microtime.php")
	print("support.function.mime_magic.php")
	print("support.function.ming.php")
	print("support.function.multi.php")
	print("support.function.mysqli_api.php")
	print("support.function.mysqli_embedded.php")
	print("support.function.mysqli_nonapi.php")
	print("support.function.mysqli_repl.php")
	print("support.function.mysqli_report.php")
	print("support.function.namednodemap.php")
	print("support.function.namelist.php")
	print("support.function.ncurses_functions.php")
	print("support.function.node.php")
	print("support.function.nodelist.php")
	print("support.function.nsapi.php")
	print("support.function.oci8_interface.php")
	print("support.function.openssl.php")
	print("support.function.output.php")
	print("support.function.pack.php")
	print("support.function.pageinfo.php")
	print("support.function.pcntl.php")
	print("support.function.pdo.php")
	print("support.function.pdo_dbh.php")
	print("support.function.pgsql.php")
	print("support.function.php_apache.php")
	print("support.function.php_date.php")
	print("support.function.php_dom.php")
	print("support.function.php_fbsql.php")
	print("support.function.php_ftp.php")
	print("support.function.php_functions.php")
	print("support.function.php_imap.php")
	print("support.function.php_mbregex.php")
	print("support.function.php_milter.php")
	print("support.function.php_msql.php")
	print("support.function.php_mssql.php")
	print("support.function.php_mysql.php")
	print("support.function.php_odbc.php")
	print("support.function.php_pcre.php")
	print("support.function.php_spl.php")
	print("support.function.php_sybase_ct.php")
	print("support.function.php_sybase_db.php")
	print("support.function.php_xmlwriter.php")
	print("support.function.php_zip.php")
	print("support.function.posix.php")
	print("support.function.proc_open.php")
	print("support.function.pspell.php")
	print("support.function.quot_print.php")
	print("support.function.rand.php")
	print("support.function.readline.php")
	print("support.function.recode.php")
	print("support.function.reg.php")
	print("support.function.session.php")
	print("support.function.sha1.php")
	print("support.function.shmop.php")
	print("support.function.simplexml.php")
	print("support.function.skeleton.php")
	print("support.function.snmp.php")
	print("support.function.sockets.php")
	print("support.function.soundex.php")
	print("support.function.spl_iterators.php")
	print("support.function.sqlite.php")
	print("support.function.streamsfuncs.php")
	print("support.function.string.php")
	print("support.function.string_extend.php")
	print("support.function.syslog.php")
	print("support.function.sysvmsg.php")
	print("support.function.sysvsem.php")
	print("support.function.sysvshm.php")
	print("support.function.text.php")
	print("support.function.tidy.php")
	print("support.function.tokenizer.php")
	print("support.function.type.php")
	print("support.function.uniqid.php")
	print("support.function.url.php")
	print("support.function.user_filters.php")
	print("support.function.userdatahandler.php")
	print("support.function.userspace.php")
	print("support.function.uuencode.php")
	print("support.function.var.php")
	print("support.function.versioning.php")
	print("support.function.wddx.php")
	print("support.function.xml.php")
	print("support.function.xmlrpc-epi-php.php")
	print("support.function.xpath.php")
	print("support.function.xsltprocessor.php")
	print("support.function.zlib.php")
	print("variable.other.class.php")
	print("variable.other.global.php")
	print("variable.other.global.safer.php")
	print("variable.other.index.php")
	print("variable.other.php")
	print("variable.other.property.php")
	return ""




def plain_text():
	header = "PLAIN_TEXT"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.plain\n")
	print("markup.underline.link")
	print("meta.bullet-point.light")
	print("meta.bullet-point.star")
	print("meta.bullet-point.strong")
	print("punctuation.definition.item.text")
	return ""




def pmwiki():
	header = "PMWIKI"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.pmwiki\n")
	print("PmWiki")
	print("entity.name.type.term.pmwiki")
	print("keyword.control.bullet-list.pmwiki")
	print("keyword.control.continue-line.pmwiki")
	print("keyword.control.heading.pmwiki")
	print("keyword.control.indented-paragraph.pmwiki")
	print("keyword.control.line-break.pmwiki")
	print("keyword.control.link.pmwiki")
	print("keyword.control.number-list.pmwiki")
	print("keyword.control.term-definition.pmwiki")
	print("markup.bold.strong.pmwiki")
	print("markup.heading.pmwiki")
	print("markup.italic.emphasis.pmwiki")
	print("markup.list.numbered.pmwiki")
	print("markup.list.unnumbered.pmwiki")
	print("markup.raw.monospace.pmwiki")
	print("markup.raw.verbatim-text.pmwiki")
	print("markup.underline.link.pmwiki")
	print("markup.underline.pmwiki")
	print("meta.indented-paragraph.pmwiki")
	print("meta.link.inline.pmwiki")
	print("meta.normal-word.pmwiki")
	print("meta.separator.pmwiki")
	print("meta.style.larger.pmwiki")
	print("meta.style.smaller.pmwiki")
	print("meta.term-definition.pmwiki")
	print("string.other.link.title.pmwiki")
	print("string.unquoted.definition.pmwiki")
	return ""




def postscript():
	header = "POSTSCRIPT"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.postscript\n")
	print("Postscript")
	print("comment.line.percentage.postscript")
	print("constant.character.escape.postscript")
	print("constant.numeric.octal.postscript")
	print("constant.numeric.postscript")
	print("constant.numeric.radix.postscript")
	print("invalid.illegal.base85.char.postscript")
	print("invalid.illegal.hexadecimal.char.postscript")
	print("invalid.illegal.unknown-escape.postscript.ignored")
	print("keyword.operator.postscript")
	print("keyword.other.DSC.postscript")
	print("meta.Document-Structuring-Comment.postscript")
	print("meta.array.postscript")
	print("meta.dictionary.postscript")
	print("meta.procedure.postscript")
	print("punctuation.definition.array.postscript")
	print("punctuation.definition.comment.postscript")
	print("punctuation.definition.dictionary.postscript")
	print("punctuation.definition.procedure.postscript")
	print("punctuation.definition.string.begin.postscript")
	print("punctuation.definition.string.end.postscript")
	print("string.other.base85.postscript")
	print("string.other.hexadecimal.postscript")
	print("string.other.postscript")
	print("string.unquoted.DSC.postscript")
	print("variable.other.immediately-evaluated.postscript")
	print("variable.other.literal.postscript")
	print("variable.other.name.postscript")
	return ""




def processing():
	header = "PROCESSING"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.processing\n")
	print("Processing")
	print("comment.block.documentation.processing")
	print("comment.block.empty.processing")
	print("comment.block.processing")
	print("comment.line.double-slash.processing")
	print("constant.character.escape.processing")
	print("constant.language.processing")
	print("constant.numeric.processing")
	print("constant.other.processing")
	print("entity.name.type.class.processing")
	print("entity.other.inherited-class.processing")
	print("keyword.control.catch-exception.processing")
	print("keyword.control.processing")
	print("keyword.operator.processing")
	print("keyword.other.class-fns.processing")
	print("keyword.other.documentation.params.processing")
	print("keyword.other.documentation.value.processing")
	print("keyword.other.embedded-docs.params.processing")
	print("meta.class.processing")
	print("punctuation.definition.comment.processing")
	print("punctuation.definition.string.begin.processing")
	print("punctuation.definition.string.end.processing")
	print("storage.modifier.access-control.processing")
	print("storage.modifier.extends.processing")
	print("storage.modifier.processing")
	print("storage.type.class.processing")
	print("storage.type.processing")
	print("string.quoted.double.processing")
	print("string.quoted.single.processing")
	print("support.class.processing")
	print("support.constant.processing")
	print("support.function.processing")
	print("variable.language.processing")
	return ""




def prolog():
	header = "PROLOG"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.prolog\n")
	print("Prolog")
	print("comment.line.percent.prolog")
	print("constant.character.escape.prolog")
	print("constant.character.escape.quote.prolog")
	print("constant.other.symbol.prolog")
	print("keyword.operator.definition.prolog")
	print("punctuation.definition.comment.prolog")
	print("punctuation.definition.string.begin.prolog")
	print("punctuation.definition.string.end.prolog")
	print("string.quoted.single.prolog")
	print("variable.other.prolog")
	return ""




def property_list():
	header = "PROPERTY_LIST"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: []\n")
	print("comment.block.plist")
	print("comment.block.xml.plist")
	print("comment.line.double-slash.plist")
	print("constant.character.entity.xml.plist")
	print("constant.character.escape.plist")
	print("constant.numeric.base64.plist")
	print("constant.numeric.base64.xml.plist")
	print("constant.numeric.integer.xml.plist")
	print("constant.numeric.plist")
	print("constant.numeric.real.xml.plist")
	print("constant.other.date.xml.plist")
	print("constant.other.key.plist")
	print("entity.name.tag.localname.xml.plist")
	print("entity.name.tag.xml.plist")
	print("entity.other.attribute-name.version.xml.plist")
	print("invalid.illegal.bad-ampersand.xml.plist")
	print("invalid.illegal.character-data-not-allowed-here.xml.plist")
	print("invalid.illegal.character-not-allowed-here.plist")
	print("invalid.illegal.double-dash-not-allowed.xml.plist")
	print("invalid.illegal.invalid-character.plist")
	print("invalid.illegal.invalid-character.xml.plist")
	print("invalid.illegal.not-a-number.xml.plist")
	print("invalid.illegal.tag-not-recognized.xml.plist")
	print("meta.binary-data.plist")
	print("meta.group.array.plist")
	print("meta.group.dictionary.plist")
	print("meta.rule.named.plist")
	print("meta.scope.between-tag-pair.xml.plist")
	print("meta.tag.array.xml.plist")
	print("meta.tag.boolean.xml.plist")
	print("meta.tag.data.xml.plist")
	print("meta.tag.date.xml.plist")
	print("meta.tag.dict.xml.plist")
	print("meta.tag.integer.xml.plist")
	print("meta.tag.key.xml.plist")
	print("meta.tag.plist.xml.plist")
	print("meta.tag.real.xml.plist")
	print("meta.tag.string.xml.plist")
	print("punctuation.definition.comment.plist")
	print("punctuation.definition.comment.xml.plist")
	print("punctuation.definition.constant.xml")
	print("punctuation.definition.data.plist")
	print("punctuation.definition.string.begin.plist")
	print("punctuation.definition.string.begin.xml.plist")
	print("punctuation.definition.string.end.plist")
	print("punctuation.definition.string.end.xml.plist")
	print("punctuation.definition.string.xml")
	print("punctuation.definition.tag.xml.plist")
	print("punctuation.section.array.plist")
	print("punctuation.section.dictionary.plist")
	print("punctuation.separator.array.plist")
	print("punctuation.separator.key-value.plist")
	print("punctuation.separator.key-value.xml.plist")
	print("punctuation.terminator.array.plist")
	print("punctuation.terminator.data.plist")
	print("punctuation.terminator.dictionary.plist")
	print("punctuation.terminator.rule.plist")
	print("source.plist")
	print("source.plist.binary")
	print("string.quoted.double.plist")
	print("string.quoted.double.xml.plist")
	print("string.quoted.single.plist")
	print("string.quoted.single.xml.plist")
	print("string.unquoted.cdata.xml")
	print("string.unquoted.plist")
	print("text.xml.plist")
	return ""




def python():
	header = "PYTHON"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.python\n")
	print("Python")
	print("comment.block.python")
	print("comment.line.number-sign.python")
	print("constant.character.escape.backlash.python")
	print("constant.character.escape.backspace.python")
	print("constant.character.escape.bell.python")
	print("constant.character.escape.double-quote.python")
	print("constant.character.escape.formfeed.python")
	print("constant.character.escape.hex.python")
	print("constant.character.escape.linefeed.python")
	print("constant.character.escape.newline.python")
	print("constant.character.escape.octal.python")
	print("constant.character.escape.return.python")
	print("constant.character.escape.single-quote.python")
	print("constant.character.escape.tab.python")
	print("constant.character.escape.unicode.16-bit-hex.python")
	print("constant.character.escape.unicode.32-bit-hex.python")
	print("constant.character.escape.unicode.name.python")
	print("constant.character.escape.vertical-tab.python")
	print("constant.language.python")
	print("constant.numeric.complex.python")
	print("constant.numeric.float.python")
	print("constant.numeric.integer.decimal.python")
	print("constant.numeric.integer.hexadecimal.python")
	print("constant.numeric.integer.long.decimal.python")
	print("constant.numeric.integer.long.hexadecimal.python")
	print("constant.numeric.integer.long.octal.python")
	print("constant.numeric.integer.octal.python")
	print("constant.other.placeholder.python")
	print("invalid.illegal.missing-inheritance.python")
	print("invalid.illegal.missing-parameters.python")
	print("invalid.illegal.missing-section-begin.python")
	print("invalid.illegal.name.python")
	print("invalid.illegal.unclosed-string.python")
	print("invalid.illegal.unexpected-text.python")
	print("keyword.control.flow.python")
	print("keyword.control.import.from.python")
	print("keyword.control.import.python")
	print("keyword.operator.arithmetic.python")
	print("keyword.operator.assignment.augmented.python")
	print("keyword.operator.assignment.python")
	print("keyword.operator.comparison.python")
	print("keyword.operator.logical.python")
	print("keyword.other.python")
	print("meta.class.old-style.python")
	print("meta.class.python")
	print("meta.empty-dictionary.python")
	print("meta.empty-list.python")
	print("meta.empty-string.double.python")
	print("meta.empty-string.single.python")
	print("meta.empty-tuple.python")
	print("meta.function-call.python")
	print("meta.function.decorator.python")
	print("meta.function.python")
	print("meta.item-access.python")
	print("meta.structure.dictionary.python")
	print("meta.structure.list.python")
	print("meta.structure.tuple.python")
	print("punctuation.definition.arguments.begin.python")
	print("punctuation.definition.arguments.end.python")
	print("punctuation.definition.comment.python")
	print("punctuation.definition.decorator.python")
	print("punctuation.definition.dictionary.begin.python")
	print("punctuation.definition.dictionary.end.python")
	print("punctuation.definition.inheritance.begin.python")
	print("punctuation.definition.inheritance.end.python")
	print("punctuation.definition.list.begin.python")
	print("punctuation.definition.list.end.python")
	print("punctuation.definition.parameters.begin.python")
	print("punctuation.definition.parameters.end.python")
	print("punctuation.definition.string.begin.python")
	print("punctuation.definition.string.end.python")
	print("punctuation.definition.tuple.begin.python")
	print("punctuation.definition.tuple.end.python")
	print("punctuation.section.class.begin.python")
	print("punctuation.section.function.begin.python")
	print("punctuation.separator.continuation.line.python")
	print("punctuation.separator.dictionary.python")
	print("punctuation.separator.inheritance.python")
	print("punctuation.separator.list.python")
	print("punctuation.separator.parameters.python")
	print("punctuation.separator.valuepair.dictionary.python")
	print("storage.modifier.global.python")
	print("storage.type.class.python")
	print("storage.type.function.python")
	print("storage.type.string.python")
	print("string.quoted.double.block.python")
	print("string.quoted.double.block.raw.python")
	print("string.quoted.double.block.unicode-raw.python")
	print("string.quoted.double.block.unicode.python")
	print("string.quoted.double.single-line.python")
	print("string.quoted.double.single-line.raw.python")
	print("string.quoted.double.single-line.unicode-raw.python")
	print("string.quoted.double.single-line.unicode.python")
	print("string.quoted.single.block.python")
	print("string.quoted.single.block.raw.python")
	print("string.quoted.single.block.unicode-raw.python")
	print("string.quoted.single.block.unicode.python")
	print("string.quoted.single.single-line.python")
	print("string.quoted.single.single-line.raw.python")
	print("string.quoted.single.single-line.unicode-raw.python")
	print("string.quoted.single.single-line.unicode.python")
	print("support.function.builtin.python")
	print("support.function.magic.python")
	print("support.type.exception.python")
	print("support.type.python")
	print("support.variable.magic.python")
	print("variable.language.python")
	print("variable.parameter.function.python")
	return ""




def python_django():
	header = "PYTHON_DJANGO"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.python.django\n")
	print("support.function.django.model")
	print("support.function.django.view")
	print("support.other.django.module")
	print("support.type.django.model")
	print("variable.other.django.settings")
	return ""




def qmake_project():
	header = "QMAKE_PROJECT"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.qmake\n")
	print("comment.line.number-sign.qmake")
	print("constant.other.filename.qmake")
	print("entity.name.function.qmake")
	print("keyword.other.qmake")
	print("keyword.other.scope.qmake")
	print("markup.other.assignment.continuation.qmake")
	print("markup.other.assignment.qmake")
	print("markup.other.config.qmake")
	print("markup.other.qt.qmake")
	print("markup.other.template.qmake")
	print("punctuation.definition.comment.qmake")
	print("punctuation.definition.parameters.qmake")
	print("punctuation.definition.string.begin.qmake")
	print("punctuation.definition.string.end.qmake")
	print("punctuation.definition.variable.qmake")
	print("punctuation.separator.key-value.qmake")
	print("string.interpolated.qmake")
	print("string.quoted.double.qmake")
	print("string.regexp.qmake")
	print("variable.language.qmake")
	print("variable.other.qmake")
	return ""




def qt_cpp():
	header = "QT_C++"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.c++.qt\n")
	print("storage.modifier.qt")
	print("storage.type.qt")
	print("support.class.qt")
	print("support.function.qt")
	print("support.other.macro.qt")
	return ""




def quake3_config():
	header = "QUAKE3_CONFIG"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.quake-config\n")
	print("comment.line.double-slash.quake3")
	print("constant.character.escape.quake3")
	print("constant.numeric.quake3")
	print("keyword.other.quake3")
	print("keyword.other.string-embedded.quake3")
	print("punctuation.definition.comment.quake3")
	print("punctuation.definition.string.begin.quake3")
	print("punctuation.definition.string.end.quake3")
	print("string.quoted.double.quake3")
	return ""




def r():
	header = "R"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.r\n")
	print("R")
	print("comment.line.number-sign.r")
	print("constant.character.escape.r")
	print("constant.language.r")
	print("constant.numeric.r")
	print("entity.name.function.r")
	print("keyword.control.r")
	print("keyword.operator.arithmetic.r")
	print("keyword.operator.assignment.r")
	print("keyword.operator.comparison.r")
	print("keyword.operator.logical.r")
	print("keyword.other.r")
	print("meta.function.r")
	print("punctuation.definition.comment.r")
	print("punctuation.definition.string.begin.r")
	print("punctuation.definition.string.end.r")
	print("storage.type.r")
	print("string.quoted.double.r")
	print("string.quoted.single.r")
	print("support.constant.misc.r")
	print("variable.other.r")
	print("variable.parameter.r")
	return ""




def r_console():
	header = "R_CONSOLE"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.r-console\n")
	print("punctuation.section.embedded.r-console")
	print("source.r.embedded.r-console")
	return ""




def ragel():
	header = "RAGEL"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.c.ragel\n")
	print("Ragel")
	print("comment.line.ragel")
	print("constant.character.escape.ragel")
	print("constant.other.placeholder.ragel")
	print("entity.name.type.action-reference.ragel")
	print("entity.name.type.action.ragel")
	print("entity.name.type.machine-definition.ragel")
	print("entity.name.type.machine-instantiation.ragel")
	print("invalid.illegal.placeholder.ragel")
	print("invalid.illegal.unknown-escape.ragel")
	print("keyword.operator.contatenation.ragel")
	print("keyword.other.action.ragel")
	print("keyword.other.ragel")
	print("meta.function.action.ragel")
	print("meta.machine-definition.ragel")
	print("meta.machine-instantiation.ragel")
	print("meta.ragel.longest-match")
	print("punctuation.definition.comment.ragel")
	print("punctuation.definition.entity.ragel")
	print("punctuation.definition.string.begin.ragel")
	print("punctuation.definition.string.end.ragel")
	print("punctuation.section.embedded.c")
	print("punctuation.section.embedded.ragel")
	print("punctuation.section.function.ragel")
	print("punctuation.separator.key-value.ragel")
	print("punctuation.terminator.machine-definition.ragel")
	print("punctuation.terminator.machine-instantiation.ragel")
	print("source.c")
	print("source.ragel")
	print("string.quoted.double.ragel")
	print("string.quoted.single.ragel")
	print("string.regexp.character-class.ragel")
	print("string.regexp.classic.ragel")
	print("support.function.ragel")
	return ""




def rd_r_documentation():
	header = "RD_R_DOCUMENTATION"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.tex.latex.rd\n")
	print("entity.name.tag.author.rd")
	print("keyword.other.author.rd")
	print("keyword.other.examples.rd")
	print("keyword.other.section.rd")
	print("keyword.other.usage.rd")
	print("markup.underline.link.rd")
	print("meta.author.rd")
	print("meta.examples.rd")
	print("meta.section.rd")
	print("meta.usage.rd")
	print("punctuation.definition.arguments.begin.rd")
	print("punctuation.definition.arguments.end.rd")
	print("punctuation.definition.function.rd")
	print("punctuation.definition.link.rd")
	return ""




def regexp():
	header = "REGEXP"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.regexp\n")
	print("comment.line.number-sign.regexp")
	print("constant.character.escape.regexp")
	print("constant.other.assertion.regexp")
	print("constant.other.range.regexp")
	print("keyword.control.anchors.regexp")
	print("keyword.control.character-class.regexp")
	print("keyword.control.set.regexp")
	print("keyword.operator.intersection.regexp")
	print("keyword.operator.quantifier.regexp")
	print("keyword.operator.regexp")
	print("keyword.other.backref-and-recursion.regexp")
	print("string.regexp.group")
	return ""




def regular_expressions_oniguruma():
	header = "REGULAR_EXPRESSIONS_ONIGURUMA"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.regexp.oniguruma\n")
	print("comment.block.regexp")
	print("comment.line.number-sign.regexp")
	print("constant.character.character-class.regexp")
	print("constant.character.escape.backslash.regexp")
	print("constant.character.numeric.regexp")
	print("constant.other.character-class.posix.regexp")
	print("constant.other.character-class.range.regexp")
	print("constant.other.character-class.set.regexp")
	print("entity.name.section.back-reference")
	print("entity.name.section.group.regexp")
	print("keyword.control.anchor.regexp")
	print("keyword.operator.intersection.regexp")
	print("keyword.operator.negation.regexp")
	print("keyword.operator.or.regexp")
	print("keyword.operator.quantifier.regexp")
	print("keyword.other.back-reference.named.regexp")
	print("keyword.other.back-reference.regexp")
	print("keyword.other.group-options.regexp")
	print("keyword.other.option-toggle.regexp")
	print("meta.assertion.look-ahead.regexp")
	print("meta.assertion.look-behind.regexp")
	print("meta.assertion.negative-look-ahead.regexp")
	print("meta.assertion.negative-look-behind.regexp")
	print("meta.group.assertion.regexp")
	print("meta.group.regexp")
	print("punctuation.definition.character-class.regexp")
	print("punctuation.definition.group.regexp")
	return ""




def regular_expressions_python():
	header = "REGULAR_EXPRESSIONS_PYTHON"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.regexp.python\n")
	print("comment.block.regexp")
	print("comment.line.number-sign.regexp")
	print("constant.character.character-class.regexp")
	print("constant.character.escape.backslash.regexp")
	print("constant.other.character-class.range.regexp")
	print("constant.other.character-class.set.regexp")
	print("entity.name.section.back-reference.regexp")
	print("entity.name.section.group.regexp")
	print("keyword.control.anchor.regexp")
	print("keyword.operator.negation.regexp")
	print("keyword.operator.or.regexp")
	print("keyword.operator.quantifier.regexp")
	print("keyword.other.back-reference.named.regexp")
	print("keyword.other.back-reference.regexp")
	print("keyword.other.option-toggle.regexp")
	print("meta.assertion.look-ahead.regexp")
	print("meta.assertion.look-behind.regexp")
	print("meta.assertion.negative-look-ahead.regexp")
	print("meta.assertion.negative-look-behind.regexp")
	print("meta.group.assertion.conditional.regexp")
	print("meta.group.assertion.regexp")
	print("meta.group.regexp")
	print("punctuation.definition.character-class.regexp")
	print("punctuation.definition.group.assertion.conditional.regexp")
	print("punctuation.definition.group.assertion.regexp")
	print("punctuation.definition.group.capture.regexp")
	print("punctuation.definition.group.no-capture.regexp")
	print("punctuation.definition.group.regexp")
	return ""




def release_notes():
	header = "RELEASE_NOTES"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.plain.release-notes\n")
	print("constant.numeric.ticket.release-notes")
	print("constant.other.bundle-name.release-notes")
	print("constant.other.committer-name.release-notes")
	print("keyword.other.release-notes")
	print("markup.underline.link")
	print("meta.separator.release-notes")
	print("meta.ticket.release-notes")
	print("meta.toc-list.release-notes")
	print("meta.word.camel-case")
	print("punctuation.definition.keyword.release-notes")
	print("punctuation.definition.separator.release-notes")
	print("storage.type.ticket.release-notes")
	return ""




def remind():
	header = "REMIND"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.remind\n")
	print("Remind")
	print("comment.line.number-sign.remind")
	print("comment.line.semicolon.remind")
	print("constant.character.escape.remind")
	print("constant.numeric.integer.remind")
	print("constant.other.date.remind")
	print("constant.other.placeholder.remind")
	print("constant.other.time.remind")
	print("constant.other.time.trigger.remind")
	print("entity.name.function.fsetline.remind")
	print("entity.name.function.remind")
	print("keyword.control.command.commandline.remind")
	print("keyword.control.command.trigger.remind")
	print("keyword.control.else-or-endif.remind")
	print("keyword.control.endline.commandline.remind")
	print("keyword.control.expiry.commandline.remind")
	print("keyword.control.fset.fsetline.remind")
	print("keyword.control.if.remind")
	print("keyword.control.iftrig.remind")
	print("keyword.control.include.commandline.remind")
	print("keyword.control.message.commandline.remind")
	print("keyword.control.move-reminder.trigger.remind")
	print("keyword.control.satisfy.commandline.remind")
	print("keyword.control.set.setline.remind")
	print("keyword.control.set.unsetline.remind")
	print("keyword.control.single.command.remind")
	print("keyword.operator.remind")
	print("keyword.other.attime.trigger.remind")
	print("keyword.other.duration.trigger.remind")
	print("meta.attime.trigger.remind")
	print("meta.commandline.remind")
	print("meta.duration.trigger.remind")
	print("meta.fsetline.remind")
	print("meta.function.builtin.remind")
	print("meta.function.user.remind")
	print("meta.if.remind")
	print("meta.iftrig.remind")
	print("meta.includeline.remind")
	print("meta.satisfy.remind")
	print("meta.setline.remind")
	print("meta.single.command.remind")
	print("meta.unsetline.remind")
	print("punctuation.definition.arguments.remind")
	print("punctuation.definition.comment.remind")
	print("punctuation.definition.constant.remind")
	print("punctuation.definition.string.begin.remind")
	print("punctuation.definition.string.end.remind")
	print("punctuation.definition.variable.remind")
	print("punctuation.section.scope.remind")
	print("string.quoted.double.remind")
	print("support.constant.day.dateitem.remind")
	print("support.constant.month.dateitem.remind")
	print("support.constant.weekday.dateitem.remind")
	print("support.constant.year.dateitem.remind")
	print("support.function.builtin.remind")
	print("variable.language.system.remind")
	print("variable.other.comp.trigger.remind")
	print("variable.other.component.back.trigger.remind")
	print("variable.other.component.delta.trigger.remind")
	print("variable.other.component.repeat.trigger.remind")
	print("variable.other.component.trigger.remind")
	print("variable.other.setline.remind")
	print("variable.other.unsetline.remind")
	print("variable.parameter.fsetline.remind")
	print("variable.parameter.user.remind")
	return ""




def restructuredtext():
	header = "RESTRUCTUREDTEXT"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.restructuredtext\n")
	print("comment.line.double-dot.restructuredtext")
	print("constant.other.citation.link.restructuredtext")
	print("constant.other.footnote.link")
	print("constant.other.footnote.link.restructuredtext")
	print("entity.name.tag.restructuredtext")
	print("markup.bold.restructuredtext")
	print("markup.heading.restructuredtext")
	print("markup.italic.restructuredtext")
	print("markup.other.command.restructuredtext")
	print("markup.other.table.restructuredtext")
	print("markup.raw.restructuredtext")
	print("markup.underline.link.restructuredtext")
	print("markup.underline.substitution.restructuredtext")
	print("meta.directive.restructuredtext")
	print("meta.link.citation.def.restructuredtext")
	print("meta.link.citation.restructuredtext")
	print("meta.link.footnote.auto.restructuredtext")
	print("meta.link.footnote.def.restructuredtext")
	print("meta.link.footnote.numeric.restructuredtext")
	print("meta.link.footnote.symbol.auto.restructuredtext")
	print("meta.link.inline.restructuredtext")
	print("meta.link.reference")
	print("meta.link.reference.def.restructuredtext")
	print("meta.other.directive.restructuredtext")
	print("meta.raw.block.restructuredtext")
	print("meta.startraw.restructuredtext")
	print("punctuation.definition.comment.restructuredtext")
	print("punctuation.definition.constant.restructuredtext")
	print("punctuation.definition.directive.restructuredtext")
	print("punctuation.definition.field.restructuredtext")
	print("punctuation.definition.heading.restructuredtext")
	print("punctuation.definition.intepreted.restructuredtext")
	print("punctuation.definition.italic.restructuredtext")
	print("punctuation.definition.link.restructuredtext")
	print("punctuation.definition.location.restructuredtext")
	print("punctuation.definition.raw.restructuredtext")
	print("punctuation.definition.string.restructuredtext")
	print("punctuation.definition.substitution.restructuredtext")
	print("punctuation.definition.table.restructuredtext")
	print("punctuation.separator.key-value.restructuredtext")
	print("reStructuredText")
	print("string.other.citation.restructuredtext")
	print("string.other.footnote.restructuredtext")
	print("string.other.link.title.restructuredtext")
	return ""




def rez():
	header = "REZ"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.rez\n")
	print("Rez")
	print("comment.block.rez")
	print("comment.line.double-slash.rez")
	print("constant.character.escape.rez")
	print("constant.numeric.rez")
	print("keyword.control.import.rez")
	print("keyword.control.rez")
	print("keyword.other.attributes.rez")
	print("meta.preprocessor.rez")
	print("punctuation.definition.comment.rez")
	print("punctuation.definition.function.rez")
	print("punctuation.definition.preprocessor.rez")
	print("punctuation.definition.string.begin.rez")
	print("punctuation.definition.string.end.rez")
	print("storage.type.rez")
	print("string.quoted.double.rez")
	print("string.quoted.other.hex.rez")
	print("string.quoted.single.rez")
	print("support.function.built-in.rez")
	return ""




def ruby():
	header = "RUBY"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.ruby\n")
	print("Ruby")
	print("comment.block.documentation.ruby")
	print("comment.line.number-sign.ruby")
	print("constant.character.escape.ruby")
	print("constant.language.ruby")
	print("constant.numeric.ruby")
	print("constant.other.symbol.double-quoted.ruby")
	print("constant.other.symbol.ruby")
	print("constant.other.symbol.single-quoted.ruby")
	print("entity.name.function.ruby")
	print("entity.name.type.class.ruby")
	print("entity.name.type.module.ruby")
	print("entity.other.inherited-class.module.first.ruby")
	print("entity.other.inherited-class.module.second.ruby")
	print("entity.other.inherited-class.module.third.ruby")
	print("entity.other.inherited-class.ruby")
	print("invalid.deprecated.ruby")
	print("keyword.control.class.ruby")
	print("keyword.control.def.ruby")
	print("keyword.control.module.ruby")
	print("keyword.control.pseudo-method.ruby")
	print("keyword.control.ruby")
	print("keyword.control.ruby.start-block")
	print("keyword.operator.arithmetic.ruby")
	print("keyword.operator.assignment.augmented.ruby")
	print("keyword.operator.assignment.ruby")
	print("keyword.operator.comparison.ruby")
	print("keyword.operator.logical.ruby")
	print("keyword.operator.other.ruby")
	print("keyword.operator.unary.ruby")
	print("keyword.other.special-method.ruby")
	print("meta.class.ruby")
	print("meta.environment-variable.ruby")
	print("meta.function-call.method.with-arguments.ruby")
	print("meta.function-call.method.without-arguments.ruby")
	print("meta.function-call.ruby")
	print("meta.function.method.with-arguments.ruby")
	print("meta.function.method.without-arguments.ruby")
	print("meta.module.ruby")
	print("meta.require.ruby")
	print("meta.syntax.ruby.start-block")
	print("punctuation.definition.arbitrary-repitition.ruby")
	print("punctuation.definition.character-class.ruby")
	print("punctuation.definition.comment.ruby")
	print("punctuation.definition.constant.ruby")
	print("punctuation.definition.group.ruby")
	print("punctuation.definition.parameters.ruby")
	print("punctuation.definition.string.begin.ruby")
	print("punctuation.definition.string.end.ruby")
	print("punctuation.definition.string.ruby")
	print("punctuation.definition.variable.ruby")
	print("punctuation.section.array.ruby")
	print("punctuation.section.embedded.ruby")
	print("punctuation.section.function.ruby")
	print("punctuation.section.scope.ruby")
	print("punctuation.separator.inheritance.ruby")
	print("punctuation.separator.key-value")
	print("punctuation.separator.method.ruby")
	print("punctuation.separator.object.ruby")
	print("punctuation.separator.other.ruby")
	print("punctuation.separator.statement.ruby")
	print("punctuation.separator.variable.ruby")
	print("source.ruby.embedded.source")
	print("source.ruby.embedded.source.empty")
	print("string.interpolated.ruby")
	print("string.quoted.double.ruby")
	print("string.quoted.double.ruby.mod")
	print("string.quoted.other.literal.lower.ruby")
	print("string.quoted.other.literal.other.ruby")
	print("string.quoted.other.literal.upper.ruby")
	print("string.quoted.single.ruby")
	print("string.regexp.arbitrary-repitition.ruby")
	print("string.regexp.character-class.ruby")
	print("string.regexp.classic.ruby")
	print("string.regexp.group.ruby")
	print("string.regexp.mod-r.ruby")
	print("string.unquoted.embedded.c.ruby")
	print("string.unquoted.embedded.cplusplus.ruby")
	print("string.unquoted.embedded.css.ruby")
	print("string.unquoted.embedded.html.ruby")
	print("string.unquoted.embedded.js.ruby")
	print("string.unquoted.embedded.ruby.ruby")
	print("string.unquoted.embedded.shell.ruby")
	print("string.unquoted.heredoc.ruby")
	print("string.unquoted.program-block.ruby")
	print("support.class.ruby")
	print("text.html.embedded.ruby")
	print("variable.language.ruby")
	print("variable.other.block.ruby")
	print("variable.other.constant.ruby")
	print("variable.other.object.ruby")
	print("variable.other.readwrite.class.ruby")
	print("variable.other.readwrite.global.pre-defined.ruby")
	print("variable.other.readwrite.global.ruby")
	print("variable.other.readwrite.instance.ruby")
	return ""




def ruby_experimental():
	header = "RUBY_EXPERIMENTAL"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.ruby.experimental\n")
	print("entity.name.function.ruby")
	print("meta.even-tab.group10.spaces")
	print("meta.even-tab.group10.tab")
	print("meta.even-tab.group2.spaces")
	print("meta.even-tab.group2.tab")
	print("meta.even-tab.group4.spaces")
	print("meta.even-tab.group4.tab")
	print("meta.even-tab.group6.spaces")
	print("meta.even-tab.group6.tab")
	print("meta.even-tab.group8.spaces")
	print("meta.even-tab.group8.tab")
	print("meta.function-call.method.with-arguments.ruby")
	print("meta.function-call.method.without-arguments.ruby")
	print("meta.function-call.ruby")
	print("meta.leading-tabs")
	print("meta.odd-tab.group1.spaces")
	print("meta.odd-tab.group1.tab")
	print("meta.odd-tab.group11.spaces")
	print("meta.odd-tab.group11.tab")
	print("meta.odd-tab.group3.spaces")
	print("meta.odd-tab.group3.tab")
	print("meta.odd-tab.group5.spaces")
	print("meta.odd-tab.group5.tab")
	print("meta.odd-tab.group7.spaces")
	print("meta.odd-tab.group7.tab")
	print("meta.odd-tab.group9.spaces")
	print("meta.odd-tab.group9.tab")
	print("punctuation.section.scope.ruby.experimental")
	print("punctuation.separator.method.ruby")
	print("support.function.core.ruby")
	print("variable.other.ruby")
	return ""




def ruby_on_rails():
	header = "RUBY_ON_RAILS"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.ruby.rails\n")
	print("meta.rails.controller")
	print("meta.rails.functional_test")
	print("meta.rails.helper")
	print("meta.rails.mailer")
	print("meta.rails.model")
	print("meta.rails.unit_test")
	print("support.function.actionpack.rails")
	print("support.function.activerecord.rails")
	print("support.function.activesupport.rails")
	return ""




def s5():
	header = "S5"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.s5\n")
	print("keyword.other.s5")
	print("meta.header.s5")
	print("meta.separator.handout.s5")
	print("meta.separator.notes.s5")
	print("meta.separator.slide.s5")
	print("punctuation.separator.key-value.s5")
	print("string.unquoted.s5")
	return ""




def scheme():
	header = "SCHEME"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.scheme\n")
	print("Scheme")
	print("comment.line.semicolon.scheme")
	print("constant.character.escape.scheme")
	print("constant.character.hex-literal.scheme")
	print("constant.character.named.scheme")
	print("constant.language.boolean.scheme")
	print("constant.numeric.scheme")
	print("constant.other.empty-list.schem")
	print("constant.other.symbol.scheme")
	print("entity.name.function.scheme")
	print("invalid.illegal.parenthesis.scheme")
	print("keyword.control.quote.scheme")
	print("keyword.control.scheme")
	print("meta.after-expression.scheme")
	print("meta.declaration.procedure.scheme")
	print("meta.declaration.variable.scheme")
	print("meta.expression.scheme")
	print("punctuation.definition.comment.semicolon.scheme")
	print("punctuation.definition.string.begin.scheme")
	print("punctuation.definition.string.end.scheme")
	print("punctuation.section.expression.begin.scheme")
	print("punctuation.section.expression.end.scheme")
	print("punctuation.section.quoted.empty-list.scheme")
	print("punctuation.section.quoted.scheme")
	print("punctuation.section.quoted.symbol.scheme")
	print("punctuation.separator.cons.scheme")
	print("string.other.quoted-object.scheme")
	print("string.quoted.double.scheme")
	print("support.function.arithmetic-operators.scheme")
	print("support.function.boolean-test.scheme")
	print("support.function.convert-type.scheme")
	print("support.function.general.scheme")
	print("support.function.with-side-effects.scheme")
	print("variable.other.scheme")
	print("variable.parameter.function.scheme")
	print("variable.parameter.scheme")
	return ""




def scilab():
	header = "SCILAB"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.scilab\n")
	print("Scilab")
	print("comment.line.double-slash.scilab")
	print("constant.character.escape.scilab")
	print("constant.numeric.scilab")
	print("entity.name.function.scilab")
	print("keyword.control.scilab")
	print("punctuation.separator.continuation.scilab")
	print("string.quoted.double.scilab")
	print("string.quoted.single.scilab")
	print("support.constant.scilab")
	return ""




def setext():
	header = "SETEXT"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.setext\n")
	print("Setext")
	print("comment.block.logical_end_of_text.setext")
	print("comment.line.double-dot.setext")
	print("constant.other.reference.link.setext")
	print("constant.other.reference.note.setext")
	print("keyword.other.setext")
	print("markup.bold.setext")
	print("markup.heading.1.setext")
	print("markup.heading.2.setext")
	print("markup.italic.setext")
	print("markup.other.bullet.setext")
	print("markup.quote.setext")
	print("markup.raw.setext")
	print("markup.underline.link.setext")
	print("markup.underline.setext")
	print("meta.header.setext")
	print("meta.link.reference.def.setext")
	print("meta.link.reference.setext")
	print("meta.note.def.setext")
	print("meta.separator.document.setext")
	print("punctuation.definition.bold.setext")
	print("punctuation.definition.bullet.setext")
	print("punctuation.definition.comment.setext")
	print("punctuation.definition.italic.setext")
	print("punctuation.definition.link.setext")
	print("punctuation.definition.note.setext")
	print("punctuation.definition.quote.setext")
	print("punctuation.definition.raw.begin.setext")
	print("punctuation.definition.raw.end.setext")
	print("punctuation.definition.reference.setext")
	print("punctuation.definition.separator.setext")
	print("punctuation.definition.string.begin.setext")
	print("punctuation.definition.string.end.setext")
	print("punctuation.definition.underline.setext")
	print("punctuation.separator.key-value.setext")
	print("string.quoted.other.note.setext")
	print("string.unquoted.setext")
	return ""




def shell_unix_generic():
	header = "SHELL-UNIX-GENERIC"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.shell\n")
	print("comment.line.number-sign.shell")
	print("constant.character.escape.ansi-c.shell")
	print("constant.character.escape.control-char.shell")
	print("constant.character.escape.hex.shell")
	print("constant.character.escape.octal.shell")
	print("constant.character.escape.shell")
	print("entity.name.function.shell")
	print("keyword.control.heredoc-token.shell")
	print("keyword.control.shell")
	print("keyword.operator.heredoc.shell")
	print("keyword.operator.herestring.shell")
	print("keyword.operator.list.shell")
	print("keyword.operator.logical.shell")
	print("keyword.operator.pipe.shell")
	print("keyword.operator.redirect.shell")
	print("keyword.operator.tilde.shell")
	print("meta.function.shell")
	print("meta.herestring.shell")
	print("meta.scope.expression.shell")
	print("meta.scope.group.shell")
	print("meta.scope.logical-expression.shell")
	print("meta.scope.subshell.shell")
	print("punctuation.definition.arguments.shell")
	print("punctuation.definition.comment.shell")
	print("punctuation.definition.expression.shell")
	print("punctuation.definition.group.shell")
	print("punctuation.definition.logical-expression.shell")
	print("punctuation.definition.string.begin.shell")
	print("punctuation.definition.string.end.shell")
	print("punctuation.definition.string.shell")
	print("punctuation.definition.subshell.shell")
	print("punctuation.definition.variable.shell")
	print("storage.modifier.shell")
	print("string.interpolated.backtick.shell")
	print("string.interpolated.dollar.shell")
	print("string.interpolated.process-substitution.shell")
	print("string.other.math.shell")
	print("string.quoted.double.herestring.shell")
	print("string.quoted.double.shell")
	print("string.quoted.single.dollar.shell")
	print("string.quoted.single.herestring.shell")
	print("string.quoted.single.shell")
	print("string.unquoted.heredoc.applescript.shell")
	print("string.unquoted.heredoc.html.shell")
	print("string.unquoted.heredoc.markdown.shell")
	print("string.unquoted.heredoc.no-indent.applescript.shell")
	print("string.unquoted.heredoc.no-indent.html.shell")
	print("string.unquoted.heredoc.no-indent.markdown.shell")
	print("string.unquoted.heredoc.no-indent.ruby.shell")
	print("string.unquoted.heredoc.no-indent.shell")
	print("string.unquoted.heredoc.ruby.shell")
	print("string.unquoted.heredoc.shell")
	print("string.unquoted.herestring.shell")
	print("support.function.shell")
	print("variable.other.bracket.shell")
	print("variable.other.normal.shell")
	print("variable.other.positional.shell")
	print("variable.other.special.shell")
	return ""




def slate():
	header = "SLATE"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.slate\n")
	print("Slate")
	print("constant.character.escape.slate")
	print("constant.character.slate")
	print("constant.language.slate")
	print("constant.numeric.slate")
	print("constant.other.slate")
	print("entity.name.function.slate")
	print("entity.name.type.slate")
	print("invalid.deprecated.trailing-whitespace.slate")
	print("keyword.control.import.slate")
	print("keyword.control.slate")
	print("keyword.operator.logical.slate")
	print("keyword.operator.slate")
	print("keyword.other.name-of-parameter.slate")
	print("meta.array.literal.slate")
	print("meta.array.slate")
	print("meta.block.compact.slate")
	print("meta.block.content.slate")
	print("meta.block.header.slate")
	print("meta.block.slate")
	print("meta.definition.slate")
	print("meta.function.unary.slate")
	print("punctuation.definition.array.begin.slate")
	print("punctuation.definition.array.end.slate")
	print("punctuation.definition.constant.slate")
	print("punctuation.definition.string.begin.slate")
	print("punctuation.definition.string.end.slate")
	print("punctuation.section.block.slate")
	print("string.quoted.double.slate")
	print("string.quoted.single.slate")
	print("support.class.slate")
	print("variable.language.slate")
	print("variable.other.local.slate")
	print("variable.other.slate")
	print("variable.parameter.block.slate")
	print("variable.parameter.function.slate")
	print("variable.parameter.slate")
	return ""




def smarty():
	header = "SMARTY"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.smarty\n")
	print("Smarty")
	print("comment.block.smarty")
	print("constant.character.escape.smarty")
	print("constant.language.smarty")
	print("keyword.control.smarty")
	print("keyword.operator.other.smarty")
	print("keyword.operator.smarty")
	print("meta.attribute.smarty")
	print("punctuation.definition.comment.smarty")
	print("punctuation.definition.string.begin.smarty")
	print("punctuation.definition.string.end.smarty")
	print("punctuation.definition.variable.smarty")
	print("string.quoted.double.smarty")
	print("string.quoted.single.smarty")
	print("support.function.built-in.smarty")
	print("support.function.variable-modifier.smarty")
	print("variable.other.global.smarty")
	print("variable.other.smarty")
	return ""




def sql():
	header = "SQL"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.sql\n")
	print("SQL")
	print("comment.block.c")
	print("comment.line.double-dash.sql")
	print("comment.line.number-sign.sql")
	print("constant.character.escape.slash.sql")
	print("constant.character.escape.sql")
	print("constant.numeric.sql")
	print("entity.name.function.sql")
	print("keyword.other.DDL.create.II.sql")
	print("keyword.other.DML.II.sql")
	print("keyword.other.DML.sql")
	print("keyword.other.LUW.sql")
	print("keyword.other.authorization.sql")
	print("keyword.other.cascade.sql")
	print("keyword.other.create.sql")
	print("keyword.other.data-integrity.sql")
	print("keyword.other.object-comments.sql")
	print("keyword.other.sql")
	print("keyword.other.table.sql")
	print("meta.alter.sql")
	print("meta.create.sql")
	print("meta.drop.sql")
	print("punctuation.definition.comment.sql")
	print("punctuation.definition.string.begin.sql")
	print("punctuation.definition.string.end.sql")
	print("storage.modifier.sql")
	print("storage.type.sql")
	print("string.interpolated.sql")
	print("string.other.quoted.brackets.sql")
	print("string.quoted.double.sql")
	print("string.quoted.other.backtick.sql")
	print("string.quoted.single.sql")
	print("string.regexp.modr.sql")
	print("string.regexp.sql")
	return ""




def sql_rails():
	header = "SQL_RAILS"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.sql.ruby\n")
	print("comment.line.number-sign.ruby")
	print("source.ruby.rails.embedded.sql")
	return ""




def ssh_config():
	header = "SSH-CONFIG"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.ssh-config\n")
	print("comment.line.double-slash.ssh-config")
	print("comment.line.number-sign.ssh-config")
	print("constant.numeric.ssh-config")
	print("entity.name.section.ssh-config")
	print("keyword.other.ssh-config")
	print("meta.toc-list.ssh-config")
	print("punctuation.definition.comment.ssh-config")
	print("storage.type.ssh-config")
	return ""




def standard_ml():
	header = "STANDARD_ML"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.ml\n")
	print("comment.block.ml")
	print("constant.character.escape.ml")
	print("constant.character.ml")
	print("constant.language.ml")
	print("constant.numeric.ml")
	print("constant.other.type.ml")
	print("entity.name.function.ml")
	print("entity.name.type.module.ml")
	print("keyword.control.fun.ml")
	print("keyword.control.ml")
	print("keyword.operator.logical.ml")
	print("keyword.other.delimiter.ml")
	print("keyword.other.ml")
	print("keyword.other.module.ml")
	print("keyword.other.typeabbrev.ml")
	print("meta.definition.fun.ml")
	print("meta.module.dec.ml")
	print("meta.module.sigdec.ml")
	print("meta.spec.ml.datatype")
	print("meta.spec.ml.include")
	print("meta.spec.ml.structure")
	print("meta.spec.ml.type")
	print("meta.spec.ml.val")
	print("meta.type.ascription.ml")
	print("meta.typeabbrev.ml")
	print("meta.typeexp.ml")
	print("punctuation.definition.comment.ml")
	print("punctuation.definition.constant.ml")
	print("punctuation.definition.string.begin.ml")
	print("punctuation.definition.string.end.ml")
	print("storage.type.module.binder.ml")
	print("string.quoted.double.ml")
	print("variable.other.typename.ml")
	return ""




def strings_file():
	header = "STRINGS_FILE"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.strings\n")
	print("comment.block.strings")
	print("constant.character.escape.strings")
	print("constant.other.placeholder.strings")
	print("invalid.illegal.placeholder.c")
	print("invalid.illegal.unknown-escape.strings")
	print("punctuation.definition.comment.strings")
	print("punctuation.definition.string.begin.strings")
	print("punctuation.definition.string.end.strings")
	print("string.quoted.double.strings")
	return ""




def subversion_commit_message():
	header = "SUBVERSION_COMMIT_MESSAGE"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.subversion-commit\n")
	print("markup.changed.svn")
	print("markup.deleted.svn")
	print("markup.inserted.svn")
	print("meta.bullet-point.light")
	print("meta.bullet-point.star")
	print("meta.bullet-point.strong")
	print("meta.scope.changed-files.svn")
	print("meta.separator.svn")
	print("punctuation.definition.item.subversion-commit")
	print("svn-commit.tmp")
	return ""




def sweave():
	header = "SWEAVE"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.tex.latex.sweave\n")
	print("SWeave")
	print("comment.line.other.sweave")
	print("constant.language.boolean.sweave")
	print("constant.language.results.sweave")
	print("invalid.illegal.sweave")
	print("keyword.other.name-of-parameter.sweave")
	print("meta.block.code.sweave")
	print("meta.block.parameters.sweave")
	print("meta.block.source.r")
	print("meta.parameter.sweave")
	print("punctuation.definition.arguments.begin.latex")
	print("punctuation.definition.arguments.end.latex")
	print("punctuation.definition.parameters.begin.sweave")
	print("punctuation.definition.parameters.end.sweave")
	print("punctuation.section.embedded.begin.sweave")
	print("punctuation.section.embedded.end.sweave")
	print("punctuation.separator.key-value.sweave")
	print("punctuation.separator.parameters.sweave")
	print("source.r.embedded.sweave")
	print("string.unquoted.label.sweave")
	return ""




def swig():
	header = "SWIG"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.swig\n")
	print("SWIG")
	print("keyword.control.import.swig")
	print("keyword.other.directive.inlinecode.swig")
	print("keyword.other.directive.swig")
	print("keyword.other.function-parameter.swig")
	print("meta.preprocessor.macro.swig")
	print("meta.preprocessor.swig")
	print("punctuation.definition.keyword.swig")
	print("punctuation.definition.preprocessor.swig")
	print("punctuation.section.embedded.swig")
	print("source.swig.codeblock")
	print("storage.type.swig")
	print("string.quoted.double.swig")
	print("support.function.type.swig")
	return ""




def tcl():
	header = "TCL"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.tcl\n")
	print("Tcl")
	print("comment.line.number-sign.tcl")
	print("constant.character.escape.tcl")
	print("entity.name.function.tcl")
	print("invalid.illegal.tcl")
	print("keyword.control.tcl")
	print("keyword.other.tcl")
	print("punctuation.definition.comment.tcl")
	print("punctuation.definition.string.begin.tcl")
	print("punctuation.definition.string.end.tcl")
	print("punctuation.definition.variable.tcl")
	print("punctuation.section.embedded.begin.tcl")
	print("punctuation.section.embedded.end.tcl")
	print("source.tcl.embedded")
	print("string.quoted.double.tcl")
	print("string.regexp.tcl")
	print("variable.other.tcl")
	return ""




def template_toolkit():
	header = "TEMPLATE_TOOLKIT"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.html.tt\n")
	print("comment.line.number-sign.tt")
	print("constant.character.entity.html")
	print("entity.name.tag.tt")
	print("entity.other.attribute-name.tt")
	print("invalid.illegal.bad-ampersand.html")
	print("keyword.control.tt")
	print("keyword.operator.tt")
	print("meta.tag.template.tt")
	print("punctuation.definition.comment.tt")
	print("punctuation.definition.constant.html")
	print("punctuation.definition.string.begin.tt")
	print("punctuation.definition.string.end.tt")
	print("punctuation.definition.tag.tt")
	print("punctuation.definition.variable.tt")
	print("punctuation.separator.key-value.tt")
	print("string.quoted.double.filename.tt")
	print("string.quoted.double.tt")
	print("string.quoted.single.tt")
	print("string.unquoted.other.filename.tt")
	print("string.unquoted.tt")
	print("variable.other.tt")
	return ""




def tex():
	header = "TEX"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.tex\n")
	print("TeX")
	print("comment.line.percentage.semicolon.texshop.tex")
	print("comment.line.percentage.tex")
	print("constant.character.escape.tex")
	print("constant.character.newline.tex")
	print("constant.numeric.category.tex")
	print("keyword.control.catcode.tex")
	print("keyword.control.tex")
	print("meta.catcode.tex")
	print("meta.group.braces.tex")
	print("meta.placeholder.greek.tex")
	print("punctuation.definition.brackets.tex")
	print("punctuation.definition.comment.tex")
	print("punctuation.definition.function.tex")
	print("punctuation.definition.keyword.tex")
	print("punctuation.definition.string.begin.tex")
	print("punctuation.definition.string.end.tex")
	print("punctuation.section.group.tex")
	print("punctuation.separator.key-value.tex")
	print("string.other.math.block.tex")
	print("string.other.math.tex")
	print("support.function.general.tex")
	return ""




def tex_math():
	header = "TEX_MATH"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.tex.math\n")
	print("constant.character.math.tex")
	print("constant.numeric.math.tex")
	print("constant.other.general.math.tex")
	print("constant.other.math.tex")
	print("meta.function.sexpr.math.tex")
	print("meta.placeholder.greek.math.tex")
	print("punctuation.definition.constant.math.tex")
	print("punctuation.definition.function.math.tex")
	print("punctuation.section.embedded.begin.math.tex")
	print("punctuation.section.embedded.end.math.tex")
	print("support.function.sexpr.math.tex")
	return ""




def textile():
	header = "TEXTILE"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.html.textile\n")
	print("Textile")
	print("constant.other.reference.link.textile")
	print("entity.name.section.paragraph.textile")
	print("entity.name.tag.blockquote.textile")
	print("entity.name.tag.footnote.textile")
	print("entity.name.tag.heading.textile")
	print("entity.name.tag.paragraph.textile")
	print("entity.name.tag.textile")
	print("entity.name.type.textile")
	print("markup.bold.textile")
	print("markup.deleted.textile")
	print("markup.heading.textile")
	print("markup.inserted.textile")
	print("markup.italic.phrasemodifiers.textile")
	print("markup.italic.textile")
	print("markup.list.numbered.textile")
	print("markup.list.unnumbered.textile")
	print("markup.other.footnote.textile")
	print("markup.other.table.cell.textile")
	print("markup.other.table.textile")
	print("markup.quote.textile")
	print("markup.underline.link.image.textile")
	print("markup.underline.link.textile")
	print("meta.image.inline.textile")
	print("meta.link.inline.textile")
	print("meta.link.reference.textile")
	print("meta.paragraph.textile")
	print("string.other.link.description.textile")
	print("string.other.link.description.title.textile")
	print("string.other.link.title.textile")
	print("text.html.textile")
	return ""




def tsv():
	header = "TSV"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.tabular.tsv\n")
	print("TSV")
	print("meta.tabular.row.header.tsv")
	print("meta.tabular.row.tsv")
	print("meta.tabular.table.tsv")
	print("punctuation.separator.table.row.tsv")
	print("punctuation.separator.tabular.field.tsv")
	return ""




def twiki():
	header = "TWIKI"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.html.twiki\n")
	print("Twiki")
	print("constant.character.entity.html")
	print("constant.character.escape.twiki")
	print("entity.name.function.twiki")
	print("markup.bold.twiki")
	print("markup.heading.twiki")
	print("markup.italic.twiki")
	print("markup.list.numbered.1.twiki")
	print("markup.list.numbered.2.twiki")
	print("markup.list.numbered.3.twiki")
	print("markup.list.numbered.4.twiki")
	print("markup.list.numbered.5.twiki")
	print("markup.list.numbered.6.twiki")
	print("markup.list.numbered.paragraph")
	print("markup.list.unnumbered.1.twiki")
	print("markup.list.unnumbered.2.twiki")
	print("markup.list.unnumbered.3.twiki")
	print("markup.list.unnumbered.4.twiki")
	print("markup.list.unnumbered.5.twiki")
	print("markup.list.unnumbered.6.twiki")
	print("markup.list.unnumbered.paragraph")
	print("markup.other.def.def.twiki")
	print("markup.other.def.term.twiki")
	print("markup.other.def.twiki")
	print("markup.other.table.twiki")
	print("markup.raw.fixed.twiki")
	print("markup.raw.twiki")
	print("markup.underline.link.twiki")
	print("meta.link.inline")
	print("meta.paragraph.twiki")
	print("meta.separator.twiki")
	print("punctuation.definition.bold.twiki")
	print("punctuation.definition.constant.twiki")
	print("punctuation.definition.heading.twiki")
	print("punctuation.definition.italic.twiki")
	print("punctuation.definition.link.twiki")
	print("punctuation.definition.list_item.twiki")
	print("punctuation.definition.raw.fixed.twiki")
	print("punctuation.definition.string.begin.twiki")
	print("punctuation.definition.string.end.twiki")
	print("punctuation.definition.table.twiki")
	print("punctuation.definition.tag.twiki")
	print("punctuation.definition.variable.twiki")
	print("string.other.link.title.twiki")
	print("string.quoted.double.twiki")
	print("variable.other.twiki")
	return ""




def txt2tags():
	header = "TXT2TAGS"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.txt2tags\n")
	print("Txt2tags")
	print("comment.block.txt2tags")
	print("comment.line.txt2tags")
	print("constant.character.txt2tags")
	print("invalid.deprecated.trailing-whitespace.txt2tags")
	print("markup.bold.txt2tags")
	print("markup.heading.1.txt2tags")
	print("markup.heading.2.txt2tags")
	print("markup.heading.3.txt2tags")
	print("markup.heading.4.txt2tags")
	print("markup.heading.5.txt2tags")
	print("markup.italic.txt2tags")
	print("markup.list.numbered.txt2tags")
	print("markup.list.txt2tags")
	print("markup.list.unnumbered.txt2tags")
	print("markup.quote.txt2tags")
	print("markup.raw.verb.block.txt2tags")
	print("markup.raw.verb.inline.txt2tags")
	print("markup.raw.verb.line.txt2tags")
	print("markup.underline.txt2tags")
	print("meta.tag.email.txt2tags")
	print("meta.tag.image.txt2tags")
	print("meta.tag.link.txt2tags")
	print("meta.tag.url.txt2tags")
	print("string.interpolated.txt2tags")
	print("string.quoted.other.raw.block.txt2tags")
	print("string.quoted.other.raw.inline.txt2tags")
	print("string.quoted.other.raw.line.txt2tags")
	print("string.unquoted.txt2tags")
	return ""



def txt2tags_old():
	header = "TXT2TAGS_OLD"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.t2t\n")
	print("comment.block")
	print("comment.line")
	print("line.blank")
	print("line.list.close")
	print("line.table")
	print("markup.other.email")
	print("markup.other.link")
	print("markup.other.special")
	print("markup.raw.raw.line")
	print("meta.link.complex")
	return ""



def vectorscript():
	header = "VECTORSCRIPT"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.pascal.vectorscript\n")
	print("Vectorscript")
	print("comment.block.vectorscript")
	print("constant.character.escape.vectorscript")
	print("constant.character.parameter.vectorscript")
	print("constant.language.boolean.vectorscript")
	print("constant.other.vectorscript")
	print("entity.name.function.vectorscript")
	print("keyword.control.vectorscript")
	print("meta.function.vectorscript")
	print("punctuation.definition.comment.vectorscript")
	print("punctuation.definition.string.begin.vectorscript")
	print("punctuation.definition.string.end.vectorscript")
	print("storage.type.function.vectorscript")
	print("storage.type.procedure.vectorscript")
	print("string.quoted.single.vectorscript")
	print("support.function.vectorscript")
	print("support.function.vectorscript.undocumented")
	print("variable.other.readwrite.global.vectorscript")
	return ""




def xhtml_1dot0():
	header = "XHTML_1.0"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.html.xhtml.1-strict\n")
	print("comment.block.html")
	print("constant.character.entity.html")
	print("entity.name.tag.block.address.html")
	print("entity.name.tag.block.bdo.html")
	print("entity.name.tag.block.blockquote.html")
	print("entity.name.tag.block.br.html")
	print("entity.name.tag.block.caption.html")
	print("entity.name.tag.block.col.html")
	print("entity.name.tag.block.colgroup.html")
	print("entity.name.tag.block.dd.html")
	print("entity.name.tag.block.div.html")
	print("entity.name.tag.block.dl.html")
	print("entity.name.tag.block.dt.html")
	print("entity.name.tag.block.fieldset.html")
	print("entity.name.tag.block.form.html")
	print("entity.name.tag.block.h1.html")
	print("entity.name.tag.block.h2.html")
	print("entity.name.tag.block.h3.html")
	print("entity.name.tag.block.h4.html")
	print("entity.name.tag.block.h5.html")
	print("entity.name.tag.block.h6.html")
	print("entity.name.tag.block.hr.html")
	print("entity.name.tag.block.iframe.html")
	print("entity.name.tag.block.legend.html")
	print("entity.name.tag.block.li.html")
	print("entity.name.tag.block.map.html")
	print("entity.name.tag.block.noscript.html")
	print("entity.name.tag.block.ol.html")
	print("entity.name.tag.block.optgroup.html")
	print("entity.name.tag.block.option.html")
	print("entity.name.tag.block.p.html")
	print("entity.name.tag.block.pre.html")
	print("entity.name.tag.block.script.html")
	print("entity.name.tag.block.table.html")
	print("entity.name.tag.block.tbody.html")
	print("entity.name.tag.block.td.html")
	print("entity.name.tag.block.tfoot.html")
	print("entity.name.tag.block.th.html")
	print("entity.name.tag.block.thead.html")
	print("entity.name.tag.block.title.html")
	print("entity.name.tag.block.tr.html")
	print("entity.name.tag.block.ul.html")
	print("entity.name.tag.doctype.html")
	print("entity.name.tag.form.button.html")
	print("entity.name.tag.form.input.html")
	print("entity.name.tag.form.select.html")
	print("entity.name.tag.form.textarea.html")
	print("entity.name.tag.inline.a.html")
	print("entity.name.tag.inline.abbr.html")
	print("entity.name.tag.inline.acronym.html")
	print("entity.name.tag.inline.b.html")
	print("entity.name.tag.inline.big.html")
	print("entity.name.tag.inline.cite.html")
	print("entity.name.tag.inline.code.html")
	print("entity.name.tag.inline.del.html")
	print("entity.name.tag.inline.dfn.html")
	print("entity.name.tag.inline.em.html")
	print("entity.name.tag.inline.i.html")
	print("entity.name.tag.inline.ins.html")
	print("entity.name.tag.inline.kbd.html")
	print("entity.name.tag.inline.label.html")
	print("entity.name.tag.inline.q.html")
	print("entity.name.tag.inline.samp.html")
	print("entity.name.tag.inline.small.html")
	print("entity.name.tag.inline.span.html")
	print("entity.name.tag.inline.strong.html")
	print("entity.name.tag.inline.sub.html")
	print("entity.name.tag.inline.sup.html")
	print("entity.name.tag.inline.tt.html")
	print("entity.name.tag.inline.var.html")
	print("entity.name.tag.meta.area.html")
	print("entity.name.tag.meta.base.html")
	print("entity.name.tag.meta.link.html")
	print("entity.name.tag.meta.meta.html")
	print("entity.name.tag.meta.param.html")
	print("entity.name.tag.meta.style.html")
	print("entity.name.tag.object.img.html")
	print("entity.name.tag.object.object.html")
	print("entity.name.tag.segment.body.html")
	print("entity.name.tag.segment.head.html")
	print("entity.name.tag.segment.html.html")
	print("entity.name.tag.xml.html")
	print("entity.other.attribute-name.html")
	print("invalid.deprecated.bad-comment-ending-token.html")
	print("invalid.deprecated.invalid_placement")
	print("invalid.deprecated.no_longer_valid")
	print("invalid.illegal.bad-ampersand.html")
	print("invalid.illegal.bad-comments-or-CDATA.html")
	print("invalid.illegal.char_not_allowed")
	print("invalid.illegal.character_data_not_allowed_here")
	print("invalid.illegal.incorrect-value.html")
	print("invalid.illegal.invalid_placement")
	print("invalid.illegal.terminator.html")
	print("invalid.illegal.unrecognized-character.html")
	print("invalid.illegal.unrecognized_tag")
	print("meta.attribute-with-value.html")
	print("meta.preprocessor.server-side-includes.html")
	print("meta.scope.xml-cdata.html")
	print("meta.section.html.body.xhtml.1-strict")
	print("meta.section.html.dl.xhtml.1-strict")
	print("meta.section.html.form.xhtml.1-strict")
	print("meta.section.html.head.xhtml.1-strict")
	print("meta.section.html.html.xhtml.1-strict")
	print("meta.section.html.ol.xhtml.1-strict")
	print("meta.section.html.table.xhtml.1-strict")
	print("meta.section.html.ul.xhtml.1-strict")
	print("meta.tag.block.address.html")
	print("meta.tag.block.bdo.html")
	print("meta.tag.block.blockquote.html")
	print("meta.tag.block.br.html")
	print("meta.tag.block.caption.html")
	print("meta.tag.block.col.html")
	print("meta.tag.block.colgroup.html")
	print("meta.tag.block.dd.html")
	print("meta.tag.block.div.html")
	print("meta.tag.block.dl.html")
	print("meta.tag.block.dt.html")
	print("meta.tag.block.fieldset.html")
	print("meta.tag.block.form.html")
	print("meta.tag.block.h1.html")
	print("meta.tag.block.h2.html")
	print("meta.tag.block.h3.html")
	print("meta.tag.block.h4.html")
	print("meta.tag.block.h5.html")
	print("meta.tag.block.h6.html")
	print("meta.tag.block.hr.html")
	print("meta.tag.block.iframe.html")
	print("meta.tag.block.legend.html")
	print("meta.tag.block.li.html")
	print("meta.tag.block.map.html")
	print("meta.tag.block.noscript.html")
	print("meta.tag.block.ol.html")
	print("meta.tag.block.optgroup.html")
	print("meta.tag.block.option.html")
	print("meta.tag.block.p.html")
	print("meta.tag.block.pre.html")
	print("meta.tag.block.script.html")
	print("meta.tag.block.table.html")
	print("meta.tag.block.tbody.html")
	print("meta.tag.block.td.html")
	print("meta.tag.block.tfoot.html")
	print("meta.tag.block.th.html")
	print("meta.tag.block.thead.html")
	print("meta.tag.block.title.html")
	print("meta.tag.block.tr.html")
	print("meta.tag.block.ul.html")
	print("meta.tag.form.button.html")
	print("meta.tag.form.input.html")
	print("meta.tag.form.select.html")
	print("meta.tag.form.textarea.html")
	print("meta.tag.inline.a.html")
	print("meta.tag.inline.abbr.html")
	print("meta.tag.inline.acronym.html")
	print("meta.tag.inline.b.html")
	print("meta.tag.inline.big.html")
	print("meta.tag.inline.cite.html")
	print("meta.tag.inline.code.html")
	print("meta.tag.inline.del.html")
	print("meta.tag.inline.dfn.html")
	print("meta.tag.inline.em.html")
	print("meta.tag.inline.i.html")
	print("meta.tag.inline.ins.html")
	print("meta.tag.inline.kbd.html")
	print("meta.tag.inline.label.html")
	print("meta.tag.inline.q.html")
	print("meta.tag.inline.samp.html")
	print("meta.tag.inline.small.html")
	print("meta.tag.inline.span.html")
	print("meta.tag.inline.strong.html")
	print("meta.tag.inline.sub.html")
	print("meta.tag.inline.sup.html")
	print("meta.tag.inline.tt.html")
	print("meta.tag.inline.var.html")
	print("meta.tag.meta.area.html")
	print("meta.tag.meta.base.html")
	print("meta.tag.meta.link.html")
	print("meta.tag.meta.meta.html")
	print("meta.tag.meta.param.html")
	print("meta.tag.meta.style.html")
	print("meta.tag.object.img.html")
	print("meta.tag.object.object.html")
	print("meta.tag.preprocessor.server-side-includes.html")
	print("meta.tag.preprocessor.xml.html")
	print("meta.tag.segment.body.html")
	print("meta.tag.segment.head.html")
	print("meta.tag.segment.html.html")
	print("meta.tag.sgml.doctype.html")
	print("meta.tag.sgml.empty.html")
	print("string.quoted.double.doctype.identifiers-and-DTDs.html")
	print("string.quoted.double.html")
	print("string.quoted.single.html")
	print("string.unquoted.html")
	print("support.function.server-side-include.html")
	return ""




def xml():
	header = "XML"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.xml\n")
	print("XML")
	print("comment.block.xml")
	print("constant.character.entity.xml")
	print("entity.name.tag.doctype.xml")
	print("entity.name.tag.entity.xml")
	print("entity.name.tag.localname.xml")
	print("entity.name.tag.namespace.xml")
	print("entity.name.tag.xml")
	print("entity.other.attribute-name.localname.xml")
	print("entity.other.attribute-name.namespace.xml")
	print("entity.other.attribute-name.xml")
	print("invalid.illegal.bad-ampersand.xml")
	print("keyword.other.page-props.xml")
	print("meta.entity.xml")
	print("meta.scope.between-tag-pair.xml")
	print("meta.tag.no-content.xml")
	print("meta.tag.preprocessor.xml")
	print("meta.tag.sgml.doctype.xml")
	print("meta.tag.xml")
	print("punctuation.definition.comment.xml")
	print("punctuation.definition.constant.xml")
	print("punctuation.definition.string.begin.xml")
	print("punctuation.definition.string.end.xml")
	print("punctuation.definition.tag.xml")
	print("punctuation.section.embedded.begin.xml")
	print("punctuation.section.embedded.end.xml")
	print("punctuation.separator.namespace.xml")
	print("source.java-props.embedded.xml")
	print("source.java.embedded.xml")
	print("string.quoted.double.xml")
	print("string.quoted.single.xml")
	print("string.unquoted.cdata.xml")
	return ""




def xml_strict():
	header = "XML_STRICT"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.xml.strict\n")
	print("entity.name.tag.localname.xml")
	print("entity.name.tag.namespace.xml")
	print("entity.name.tag.xml")
	print("entity.other.attribute-name.localname.xml")
	print("entity.other.attribute-name.namespace.xml")
	print("entity.other.attribute-name.xml")
	print("invalid.illegal.unexpected-end-tag.xml")
	print("meta.tag-content.xml")
	print("meta.tag.processing-instruction.xml")
	print("meta.tag.sgml.xml")
	print("meta.tag.xml")
	print("punctuation.definition.string.begin.xml")
	print("punctuation.definition.string.end.xml")
	print("punctuation.definition.tag.xml")
	print("punctuation.separator.namespace.xml")
	print("string.quoted.double.xml")
	print("string.quoted.single.xml")
	return ""




def xsl():
	header = "XSL"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: text.xml.xsl\n")
	print("XSL")
	print("entity.name.tag.localname.xml")
	print("entity.name.tag.namespace.xml")
	print("entity.name.tag.xml")
	print("entity.other.attribute-name.localname.xml")
	print("entity.other.attribute-name.namespace.xml")
	print("entity.other.attribute-name.xml")
	print("meta.tag.xml.template")
	print("punctuation.definition.string.begin.xml")
	print("punctuation.definition.string.end.xml")
	print("punctuation.definition.tag.xml")
	print("punctuation.separator.namespace.xml")
	print("string.quoted.double.xml")
	print("string.quoted.single.xml")
	return ""




def Yaml_old():
	header = "YAML"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.yaml\n")
	print("YAML")
	print("comment.line.number-sign.ruby")
	print("comment.line.number-sign.yaml")
	print("constant.character.escape.yaml")
	print("constant.numeric.yaml")
	print("constant.other.date.yaml")
	print("entity.name.tag.yaml")
	print("invalid.deprecated.trailing-whitespace.yaml")
	print("keyword.operator.merge-key.yaml")
	print("keyword.operator.symbol")
	print("keyword.other.omap.yaml")
	print("meta.even-tab")
	print("meta.leading-tabs.yaml")
	print("meta.odd-tab")
	print("meta.tag.yaml")
	print("punctuation.definition.comment.ruby")
	print("punctuation.definition.comment.yaml")
	print("punctuation.definition.entry.yaml")
	print("punctuation.definition.keyword.yaml")
	print("punctuation.definition.string.begin.yaml")
	print("punctuation.definition.string.end.yaml")
	print("punctuation.definition.variable.yaml")
	print("punctuation.section.embedded.ruby")
	print("punctuation.separator.key-value.yaml")
	print("source.ruby.rails.embedded.html")
	print("string.interpolated.yaml")
	print("string.quoted.double.yaml")
	print("string.quoted.single.yaml")
	print("string.unquoted.block.yaml")
	print("string.unquoted.yaml")
	print("variable.other.yaml")
	return ""


def yaml():
	header = "YAML"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.yaml\n")
	print("YAML")
	print("comment.line.number-sign.ruby")
	print("comment.line.number-sign.yaml")
	print("constant.character.escape.yaml")
	print("constant.numeric.yaml")
	print("constant.other.date.yaml")
	print("entity.name.tag.yaml")
	print("invalid.deprecated.trailing-whitespace.yaml")
	print("keyword.operator.merge-key.yaml")
	print("keyword.operator.symbol")
	print("keyword.other.omap.yaml")
	print("meta.even-tab")
	print("meta.leading-tabs.yaml")
	print("meta.odd-tab")
	print("meta.tag.yaml")
	print("punctuation.definition.comment.ruby")
	print("punctuation.definition.comment.yaml")
	print("punctuation.definition.entry.yaml")
	print("punctuation.definition.keyword.yaml")
	print("punctuation.definition.string.begin.yaml")
	print("punctuation.definition.string.end.yaml")
	print("punctuation.definition.variable.yaml")
	print("punctuation.section.embedded.ruby")
	print("punctuation.separator.key-value.yaml")
	print("source.ruby.rails.embedded.html")
	print("string.interpolated.yaml")
	print("string.quoted.double.yaml")
	print("string.quoted.single.yaml")
	print("string.unquoted.block.yaml")
	print("string.unquoted.yaml")
	print("variable.other.yaml")
	return ""


def yui_javascript():
	header = "YUI_JAVASCRIPT"
	print("{} \n{}".format(header, "="*len(header)))
	print("Scope name: source.js.yui\n")
	print("support.class.js.yui")
	print("support.function.Anim.js.yui")
	print("support.function.AnimMgr.js.yui")
	print("support.function.Attribute.js.yui")
	print("support.function.AttributeProvider.js.yui")
	print("support.function.AutoComplete.js.yui")
	print("support.function.Bezier.js.yui")
	print("support.function.Button.js.yui")
	print("support.function.ButtonGroup.js.yui")
	print("support.function.Calendar.js.yui")
	print("support.function.CalendarGroup.js.yui")
	print("support.function.ColorAnim.js.yui")
	print("support.function.Column.js.yui")
	print("support.function.ColumnEditor.js.yui")
	print("support.function.ColumnSet.js.yui")
	print("support.function.Config.js.yui")
	print("support.function.Connect.js.yui")
	print("support.function.ContainerEffect.js.yui")
	print("support.function.ContextMenu.js.yui")
	print("support.function.ContextMenuItem.js.yui")
	print("support.function.CustomEvent.js.yui")
	print("support.function.DD.js.yui")
	print("support.function.DDProxy.js.yui")
	print("support.function.DDTarget.js.yui")
	print("support.function.DS_JSArray.js.yui")
	print("support.function.DS_JSFunction.js.yui")
	print("support.function.DS_XHR.js.yui")
	print("support.function.DataSource.js.yui")
	print("support.function.DataTable.js.yui")
	print("support.function.DateMath.js.yui")
	print("support.function.Dialog.js.yui")
	print("support.function.Dom.js.yui")
	print("support.function.DragDrop.js.yui")
	print("support.function.DragDropMgr.js.yui")
	print("support.function.Easing.js.yui")
	print("support.function.Element.js.yui")
	print("support.function.Event.js.yui")
	print("support.function.EventProvider.js.yui")
	print("support.function.HTMLNode.js.yui")
	print("support.function.History.js.yui")
	print("support.function.KeyListener.js.yui")
	print("support.function.LogMsg.js.yui")
	print("support.function.LogReader.js.yui")
	print("support.function.LogWriter.js.yui")
	print("support.function.Logger.js.yui")
	print("support.function.Menu.js.yui")
	print("support.function.MenuBarItem.js.yui")
	print("support.function.MenuItem.js.yui")
	print("support.function.MenuManager.js.yui")
	print("support.function.MenuModule.js.yui")
	print("support.function.MenuModuleItem.js.yui")
	print("support.function.MenuNode.js.yui")
	print("support.function.Menubar.js.yui")
	print("support.function.Module.js.yui")
	print("support.function.Motion.js.yui")
	print("support.function.Node.js.yui")
	print("support.function.Overlay.js.yui")
	print("support.function.OverlayManager.js.yui")
	print("support.function.Panel.js.yui")
	print("support.function.Record.js.yui")
	print("support.function.RecordSet.js.yui")
	print("support.function.Region.js.yui")
	print("support.function.RootNode.js.yui")
	print("support.function.Scroll.js.yui")
	print("support.function.SimpleDialog.js.yui")
	print("support.function.Slider.js.yui")
	print("support.function.SliderThumb.js.yui")
	print("support.function.Sort.js.yui")
	print("support.function.Subscriber.js.yui")
	print("support.function.TVAnim.js.yui")
	print("support.function.TVFadeIn.js.yui")
	print("support.function.TVFadeOut.js.yui")
	print("support.function.Tab.js.yui")
	print("support.function.TabView.js.yui")
	print("support.function.TextNode.js.yui")
	print("support.function.Tooltip.js.yui")
	print("support.function.TreeView.js.yui")
	print("support.function.WidthResizer.js.yui")
	print("support.function.YAHOO.js.yui")
	print("support.function.lang.js.yui")
	return ""

